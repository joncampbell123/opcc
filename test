dialect "intel-x86";

log ("cpulevel: " + value("cpulevel"));
log ("fpulevel: " + value("fpulevel"));

comment "---------------begin prefixes----------------";

if value("cpulevel") >= 186 {;
  log "186 #UD and limit";
  unknown opcode ud;
  opcode limit 15;
} if;
else {;
  log "8086 no-#UD and no-limit";
  unknown opcode silent;
  opcode limit none;
} if;

comment "-----------------begin opcodes----------------";

comment "Group 00-3F sub 0-5 (00-05,08-0D,10-15,18-1D,etc) ADD/SUB/etc   n=name b=base opcode";
set macro "group00-3F sub 0-5" (n,b) {;
  opcode value(n)
    (modifies rm(b),flags(cf,af,sf,zf,pf,of))
    (writes rm(b),flags(cf,af,sf,zf,pf,of))
    (reads reg(b),rm(b))
    (dest=rm(b))
    (param=reg(b))
    (code (value(b)+0) mrm);

  opcode value(n)
    (modifies rm(v),flags(cf,af,sf,zf,pf,of))
    (writes rm(v),flags(cf,af,sf,zf,pf,of))
    (reads reg(v),rm(v))
    (dest=rm(v))
    (param=reg(v))
    (code (value(b)+1) mrm);

  opcode value(n)
    (modifies reg(b),flags(cf,af,sf,zf,pf,of))
    (writes reg(b),flags(cf,af,sf,zf,pf,of))
    (reads rm(b),reg(b))
    (dest=reg(b))
    (param=rm(b))
    (code (value(b)+2) mrm);

  opcode value(n)
    (modifies reg(v),flags(cf,af,sf,zf,pf,of))
    (writes reg(v),flags(cf,af,sf,zf,pf,of))
    (reads rm(v),reg(v))
    (dest=reg(v))
    (param=rm(v))
    (code (value(b)+3) mrm);

  opcode value(n)
    (reads al)
    (modifies al,flags(cf,af,sf,zf,pf,of))
    (writes al,flags(cf,af,sf,zf,pf,of))
    (dest=al)
    (param=i)
    (code (value(b)+4) i=immediate(b));

  opcode value(n)
    (reads av)
    (modifies av,flags(cf,af,sf,zf,pf,of))
    (writes av,flags(cf,af,sf,zf,pf,of))
    (dest=av)
    (param=i)
    (code (value(b)+5) i=immediate(v));
} macro;

macro "group00-3F sub 0-5" ("ADD", 0x00);
macro "group00-3F sub 0-5" ("OR",  0x08);
macro "group00-3F sub 0-5" ("ADC", 0x10);
macro "group00-3F sub 0-5" ("SBB", 0x18);
macro "group00-3F sub 0-5" ("AND", 0x20);
macro "group00-3F sub 0-5" ("SUB", 0x28);
macro "group00-3F sub 0-5" ("XOR", 0x30);
macro "group00-3F sub 0-5" ("CMP", 0x38);

comment "segment push/pop pairs x6-x7";
set macro "pushpopsegpairs x6-x7" (s,b) {;
  opcode "PUSH"
    (modifies spv)
    (stack push value(s))
    (reads value(s))
    (param=value(s))
    (code (value(b)+0));

  if (value(b) == 0x0E) and (value("cpulevel") > 86) {;
    comment "skip";
  } if;
  else {;
    opcode "POP"
      (modifies spv)
      (stack pop value(s))
      (writes value(s))
      (dest=value(s))
      (code (value(b)+1));
  } if;
} macro;

macro "pushpopsegpairs x6-x7" (es,0x06);
macro "pushpopsegpairs x6-x7" (cs,0x0E);
macro "pushpopsegpairs x6-x7" (ss,0x16);
macro "pushpopsegpairs x6-x7" (ds,0x1E);

prefix "ES:"
  (comment "Segment override prefix")
  (desc "ES segment override")
  (code 0x26)
  (seg=es);

opcode "DAA"
  (comment "DAA adjust AL after addition")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(cf))
  (modifies al)
  (writes al, flags(cf,af,sf,zf,pf,of))
  (code 0x27);

prefix "CS:"
  (comment "Segment override prefix")
  (desc "CS segment override")
  (code 0x2E)
  (seg=cs);

opcode "DAS"
  (comment "DAS adjust AL after subtraction")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(cf))
  (modifies al)
  (writes al, flags(cf,af,sf,zf,pf,of))
  (code 0x2F);

prefix "SS:"
  (comment "Segment override prefix")
  (desc "SS segment override")
  (code 0x36)
  (seg=ss);

opcode "AAA"
  (comment "AAA ascii adjust AL after addition")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(af))
  (modifies ax)
  (writes ax, flags(cf,af,of,sf,zf,pf))
  (code 0x37);

prefix "DS:"
  (comment "Segment override prefix")
  (desc "DS segment override")
  (code 0x3E)
  (seg=ds);

opcode "AAS"
  (comment "AAS ascii adjust AL after subtraction")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(af))
  (modifies ax)
  (writes ax, flags(cf,af,of,sf,zf,pf))
  (code 0x3F);

opcode "INC"
  (comment "INC register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (comment "TODO: Not valid in x64 long mode")
  (code a=0x40-0x47 reg=(a&7))
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (dest=reg(v));

opcode "DEC"
  (comment "DEC register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (comment "TODO: Not valid in x64 long mode")
  (code a=0x48-0x4F reg=(a&7))
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (dest=reg(v));

opcode "PUSH"
  (comment "PUSH register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (code a=0x50-0x57 reg=(a&7))
  (reads reg(v))
  (modifies spv)
  (stack push reg(v))
  (param=reg(v));

opcode "POP"
  (comment "POP register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (code a=0x58-0x5F reg=(a&7))
  (modifies spv)
  (writes reg(v))
  (stack pop reg(v))
  (dest=reg(v));

if value("cpulevel") >= 386
prefix "FS:"
  (comment "386 Segment override prefix")
  (desc "FS segment override")
  (code 0x64)
  (seg=fs);
else
  log "No FS override";

if value("cpulevel") >= 386
prefix "GS:"
  (comment "386 Segment override prefix")
  (desc "GS segment override")
  (code 0x65)
  (seg=gs);
else
  log "No GS override";

if value("cpulevel") >= 186
opcode "PUSHA"
  (reads av,bv,cv,dv,siv,div,spv,bpv)
  (modifies spv)
  (stack push av,cv,dv,bv,spv,bpv,siv,div)
  (code 0x60 mrm);

if value("cpulevel") >= 186
opcode "POPA"
  (writes av,bv,cv,dv,siv,div,spv,bpv)
  (modifies spv)
  (stack pop div,siv,bpv,spv,bv,dv,cv,ax)
  (code 0x61 mrm);

if value("cpulevel") >= 186
opcode "BOUND"
  (reads rm(dv))
  (reads reg(v))
  (param(0)=reg(v))
  (param(1)=rm(v))
  (code 0x62 mrm);

if value("cpulevel") >= 286
opcode "ARPL"
  (reads reg(v))
  (modifies rm(v))
  (writes rm(v))
  (dest=rm(v))
  (param=reg(v))
  (code 0x63 mrm);

if value("cpulevel") >= 386
prefix "OPSZ"
  (comment "TODO: operand size override")
  (code 0x66);

if value("cpulevel") >= 386
prefix "ADSZ"
  (comment "TODO: address size override")
  (code 0x67);

if value("cpulevel") >= 186
opcode "PUSH"
  (modifies spv)
  (stack push i)
  (param=i)
  (code 0x68 i=immediate(v));

if value("cpulevel") >= 186
opcode "IMUL"
  (reads rm(v))
  (modifies reg(v))
  (writes reg(v))
  (dest=reg(v))
  (param(0)=rm(v))
  (param(1)=i)
  (code 0x69 mrm i=immediate(sv));

if value("cpulevel") >= 186
opcode "PUSH"
  (modifies spv)
  (stack push i)
  (param=i)
  (code 0x6A i=immediate(sb));

if value("cpulevel") >= 186
opcode "IMUL"
  (reads rm(v))
  (modifies reg(v))
  (writes reg(v))
  (dest=reg(v))
  (param(0)=rm(v))
  (param(1)=i)
  (code 0x6B mrm i=immediate(sb));

if value("cpulevel") >= 186
opcode "INS"
  (reads siv,far memory(b,seg,siv))
  (param=far memory(b,seg,siv))
  (modifies siv)
  (writes al)
  (dest=al)
  (code 0x6C);

if value("cpulevel") >= 186
opcode "INS"
  (reads siv,far memory(v,seg,siv))
  (param=far memory(v,seg,siv))
  (modifies siv)
  (writes av)
  (dest=av)
  (code 0x6D);

if value("cpulevel") >= 186
opcode "OUTS"
  (reads al,es,div)
  (param=al)
  (writes far memory(b,es,div),div)
  (modifies div)
  (dest=far memory(b,es,div))
  (code 0x6E);

if value("cpulevel") >= 186
opcode "OUTS"
  (reads av,es,div)
  (param=av)
  (writes far memory(v,es,div),div)
  (modifies div)
  (dest=far memory(v,es,div))
  (code 0x6F);

opcode "JO"
  (reads ipv, flags(of))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x70 p=immediate(sb) n=(ipv+p));

opcode "JNO"
  (reads ipv, flags(of))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x71 p=immediate(sb) n=(ipv+p));

opcode "JC"
  (reads ipv, flags(cf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x72 p=immediate(sb) n=(ipv+p));

opcode "JNC"
  (reads ipv, flags(cf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x73 p=immediate(sb) n=(ipv+p));

opcode "JZ"
  (reads ipv, flags(zf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x74 p=immediate(sb) n=(ipv+p));

opcode "JNZ"
  (reads ipv, flags(zf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x75 p=immediate(sb) n=(ipv+p));

opcode "JNA"
  (reads ipv, flags(zf,cf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x76 p=immediate(sb) n=(ipv+p));

opcode "JA"
  (reads ipv, flags(zf,cf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x77 p=immediate(sb) n=(ipv+p));

opcode "JS"
  (reads ipv, flags(sf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x78 p=immediate(sb) n=(ipv+p));

opcode "JNS"
  (reads ipv, flags(sf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x79 p=immediate(sb) n=(ipv+p));

opcode "JP"
  (reads ipv, flags(pf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x7A p=immediate(sb) n=(ipv+p));

opcode "JNP"
  (reads ipv, flags(pf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x7B p=immediate(sb) n=(ipv+p));

opcode "JL"
  (reads ipv, flags(sf,of))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x7C p=immediate(sb) n=(ipv+p));

opcode "JNL"
  (reads ipv, flags(sf,of))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x7D p=immediate(sb) n=(ipv+p));

opcode "JNG"
  (reads ipv, flags(zf,sf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x7E p=immediate(sb) n=(ipv+p));

opcode "JG"
  (reads ipv, flags(zf,sf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x7F p=immediate(sb) n=(ipv+p));


comment "group 80-83, n=name r=reg";
set macro "group80code" (n,r) {;
  opcode value(n)
    (modifies rm(b),flags(cf,af,sf,zf,pf,of))
    (writes rm(b),flags(cf,af,sf,zf,pf,of))
    (reads rm(b))
    (dest=rm(b))
    (param=i)
    (code 0x80 mrm i=immediate(b) reg(value(r)));

  opcode value(n)
    (modifies rm(v),flags(cf,af,sf,zf,pf,of))
    (writes rm(v),flags(cf,af,sf,zf,pf,of))
    (reads rm(v))
    (dest=rm(v))
    (param=i)
    (code 0x81 mrm i=immediate(v) reg(value(r)));

  opcode value(n)
    (modifies rm(b),flags(cf,af,sf,zf,pf,of))
    (writes rm(b),flags(cf,af,sf,zf,pf,of))
    (reads rm(b))
    (dest=rm(b))
    (param=i)
    (code 0x82 mrm i=immediate(b) reg(value(r)));

  opcode value(n)
    (modifies rm(v),flags(cf,af,sf,zf,pf,of))
    (writes rm(v),flags(cf,af,sf,zf,pf,of))
    (reads rm(v))
    (dest=rm(v))
    (param=i)
    (code 0x83 mrm i=immediate(sb) reg(value(r)));
} macro;

macro "group80code" ("ADD", 0);
macro "group80code" ("OR",  1);
macro "group80code" ("ADC", 2);
macro "group80code" ("SBB", 3);
macro "group80code" ("AND", 4);
macro "group80code" ("SUB", 5);
macro "group80code" ("XOR", 6);
macro "group80code" ("CMP", 7);

opcode "TEST"
  (reads reg(b),rm(b))
  (writes flags(of,cf,sf,zf,pf,af))
  (param(0)=reg(b))
  (param(1)=rm(b))
  (code 0x84 mrm);

opcode "TEST"
  (reads reg(v),rm(v))
  (writes flags(of,cf,sf,zf,pf,af))
  (param(0)=reg(v))
  (param(1)=rm(v))
  (code 0x85 mrm);

opcode "XCHG"
  (reads reg(b),rm(b))
  (writes reg(b),rm(b))
  (param=rm(b))
  (dest=reg(b))
  (code 0x86 mrm);

opcode "XCHG"
  (reads reg(v),rm(v))
  (writes reg(v),rm(v))
  (param=rm(v))
  (dest=reg(v))
  (code 0x87 mrm);

opcode "MOV"
  (reads reg(b))
  (writes rm(b))
  (dest=rm(b))
  (param=reg(b))
  (code 0x88 mrm);

opcode "MOV"
  (reads reg(v))
  (writes rm(v))
  (dest=rm(v))
  (param=reg(v))
  (code 0x89 mrm);

opcode "MOV"
  (writes reg(b))
  (reads rm(b))
  (param=rm(b))
  (dest=reg(b))
  (code 0x8A mrm);

opcode "MOV"
  (writes reg(v))
  (reads rm(v))
  (param=rm(v))
  (dest=reg(v))
  (code 0x8B mrm);

opcode "MOV"
  (dest=reg(v))
  (writes reg(v))
  (param=sreg(v))
  (reads sreg(v))
  (code 0x8C mrm);

opcode "LEA"
  (dest=reg(v))
  (writes reg(v))
  (param=rm(v))
  (comment "does not read r/m memory location. it stores the memory location (after arithmetic) into the register")
  (code 0x8D mrm mod(!3));

opcode "MOV"
  (dest=sreg(v))
  (writes sreg(v))
  (param=rm(v))
  (reads rm(v))
  (code 0x8E mrm);

opcode "POP"
  (dest=rm(v))
  (modifies spv)
  (reads far memory(v,ss,spv))
  (writes rm(v))
  (code 0x8F mrm reg(0));

opcode "NOP"
  (comment "Technically, XCHG AX,AX, but that does nothing and nothing else is modified")
  (code 0x90);

opcode "XCHG"
  (code a=0x91-0x97 reg=(a&7))
  (reads av, reg(v))
  (modifies av, reg(v))
  (writes av, reg(v))
  (dest=reg(v))
  (param=av);

opcode "CBW"
  (code 0x98)
  (reads al)
  (modifies av)
  (writes av);

opcode "CWD"
  (code 0x99)
  (reads av)
  (writes dv)
  (modifies dv);

opcode "CALL"
  (comment "call far address, 16:16 or 16:32")
  (writes ipv,cs,spv)
  (stack push cs,ipv)
  (param=p)
  (code 0x9A p=immediate(fpv));

prefix "WAIT"
  (comment "originally an instruction, but used as a prefix later on in the ISA. Often prefixes FPU instructions")
  (code 0x9B)
  (wait=1);

opcode "PUSHF"
  (code 0x9C)
  (reads flags(all))
  (modifies spv)
  (stack push flags(all));

opcode "POPF"
  (code 0x9D)
  (writes flags(all))
  (modifies spv)
  (stack pop flags(all));

opcode "SAHF"
  (code 0x9E)
  (reads ah)
  (writes flags(sf,zf,af,pf,cf));

opcode "LAHF"
  (code 0x9F)
  (reads flags(sf,zf,af,pf,cf))
  (writes ah);

opcode "MOV"
  (writes al)
  (reads memory(b,a))
  (dest=al)
  (param=memory(b,a))
  (code 0xA0 a=immediate(v));

opcode "MOV"
  (writes av)
  (reads memory(v,a))
  (dest=av)
  (param=memory(v,a))
  (code 0xA1 a=immediate(v));

opcode "MOV"
  (writes memory(b,a))
  (reads al)
  (dest=memory(b,a))
  (param=al)
  (code 0xA2 a=immediate(v));

opcode "MOV"
  (writes memory(v,a))
  (reads av)
  (dest=memory(v,a))
  (param=av)
  (code 0xA3 a=immediate(v));

opcode "MOVS"
  (reads far memory(b,seg,siv),siv,div,es)
  (writes far memory(b,es,div),siv,div)
  (modifies siv,div)
  (dest=far memory(b,es,div))
  (param=far memory(b,seg,siv))
  (code 0xA4);

opcode "MOVS"
  (reads far memory(v,seg,siv),siv,div,es)
  (writes far memory(v,es,div),siv,div)
  (modifies siv,div)
  (dest=far memory(v,es,div))
  (param=far memory(v,seg,siv))
  (code 0xA5);

opcode "CMPS"
  (reads far memory(b,es,div),far memory(b,seg,siv),siv,div,es)
  (modifies siv,div,flags(cf,of,sf,zf,af,pf))
  (writes flags(cf,of,sf,zf,af,pf))
  (param(0)=far memory(b,es,div))
  (param(1)=far memory(b,seg,siv))
  (code 0xA6);

opcode "CMPS"
  (reads far memory(v,es,div),far memory(v,seg,siv),siv,div,es)
  (modifies siv,div,flags(cf,of,sf,zf,af,pf))
  (writes flags(cf,of,sf,zf,af,pf))
  (param(0)=far memory(v,es,div))
  (param(1)=far memory(v,seg,siv))
  (code 0xA7);

opcode "TEST"
  (reads al)
  (param(0)=al)
  (param(1)=i)
  (modifies flags(of,cf,sf,zf,pf,af))
  (writes flags(of,cf,sf,zf,pf,af))
  (code 0xA8 i=immediate(b));

opcode "TEST"
  (reads av)
  (param(0)=av)
  (param(1)=i)
  (modifies flags(of,cf,sf,zf,pf,af))
  (writes flags(of,cf,sf,zf,pf,af))
  (code 0xA9 i=immediate(v));

opcode "STOS"
  (reads al,es,div)
  (param=al)
  (writes far memory(b,es,div),div)
  (modifies div)
  (dest=far memory(b,es,div))
  (code 0xAA);

opcode "STOS"
  (reads av,es,div)
  (param=av)
  (writes far memory(v,es,div),div)
  (modifies div)
  (dest=far memory(v,es,div))
  (code 0xAB);

opcode "LODS"
  (reads siv,far memory(b,seg,siv))
  (param=far memory(b,seg,siv))
  (modifies siv)
  (writes al)
  (dest=al)
  (code 0xAC);

opcode "LODS"
  (reads siv,far memory(v,seg,siv))
  (param=far memory(v,seg,siv))
  (modifies siv)
  (writes av)
  (dest=av)
  (code 0xAD);

opcode "SCAS"
  (reads al,es,div,far memory(b,es,div))
  (writes al)
  (modifies div)
  (param(0)=al)
  (param(1)=far memory(b,es,div))
  (code 0xAE);

opcode "SCAS"
  (reads av,es,div,far memory(v,es,div))
  (writes av)
  (modifies div)
  (param(0)=av)
  (param(1)=far memory(v,es,div))
  (code 0xAF);

opcode "MOV"
  (writes reg(b))
  (dest=reg(b))
  (param=i)
  (code a=0xB0-0xB7 i=immediate(b) reg=(a&7));

opcode "MOV"
  (writes reg(v))
  (dest=reg(v))
  (param=i)
  (code a=0xB8-0xBF i=immediate(v) reg=(a&7));

comment "group C0 opcodes (80186) n=name r=reg";
set macro "groupC0shops" (n,r) {;
  opcode value(n)
    (reads rm(b))
    (modifies rm(b),flags(of,cf,sf,zf,pf,af))
    (writes rm(b),flags(of,cf,sf,zf,pf,af))
    (dest=rm(b))
    (param=i)
    (code 0xC0 mrm i=immediate(b) reg(value(r)));

  opcode value(n)
    (reads rm(v))
    (modifies rm(v),flags(of,cf,sf,zf,pf,af))
    (writes rm(v),flags(of,cf,sf,zf,pf,af))
    (dest=rm(v))
    (param=i)
    (code 0xC1 mrm i=immediate(v) reg(value(r)));
} macro;

if value("cpulevel") >= 186 {;
  macro "groupC0shops" ("ROL", 0);
  macro "groupC0shops" ("ROR", 1);
  macro "groupC0shops" ("RCL", 2);
  macro "groupC0shops" ("RCR", 3);
  macro "groupC0shops" ("SHL", 4);
  macro "groupC0shops" ("SHR", 5);
  macro "groupC0shops" ("SAR", 7);
} if;

opcode "RET"
  (modifies spv)
  (stack pop ipv)
  (writes ipv)
  (param=c)
  (code 0xC2 c=immediate(w));

opcode "RET"
  (modifies spv)
  (stack pop ipv)
  (writes ipv)
  (code 0xC3);

opcode "LES"
  (dest=reg(v))
  (param=rm(fpv))
  (reads rm(fpv))
  (writes reg(v),es)
  (code 0xC4 mrm mod(!3));

opcode "LDS"
  (dest=reg(v))
  (param=rm(fpv))
  (reads rm(fpv))
  (writes reg(v),ds)
  (code 0xC5 mrm mod(!3));

opcode "MOV"
  (param=i)
  (dest=rm(b))
  (writes rm(b))
  (code 0xC6 mrm i=immediate(b) reg(0));

opcode "MOV"
  (param=i)
  (dest=rm(v))
  (writes rm(v))
  (code 0xC7 mrm i=immediate(v) reg(0));

if value("cpulevel") >= 186 {;
  opcode "ENTER"
    (param(0)=a)
    (param(1)=l)
    (modifies spv,bpv)
    (code 0xC8 a=immediate(w) l=immediate(b));

  opcode "LEAVE"
    (modifies spv,bpv)
    (code 0xC9);
} if;

opcode "RETF"
  (modifies spv)
  (stack pop ipv,cs)
  (writes ipv,cs)
  (param=c)
  (code 0xCA c=immediate(w));

opcode "RETF"
  (modifies spv)
  (stack pop ipv,cs)
  (writes ipv,cs)
  (code 0xCB);

opcode "INT"
  (modifies all)
  (param=3)
  (code 0xCC);

opcode "INT"
  (modifies all)
  (param=i)
  (code 0xCD i=immediate(b));

opcode "INTO"
  (modifies all)
  (reads flags(of))
  (code 0xCE);

opcode "IRET"
  (modifies spv)
  (stack pop ipv,cs,flags(all))
  (writes ipv,cs,flags(all))
  (code 0xCF);

set macro "group d0 0-3" (n,r) {;
  opcode value(n)
    (reads rm(b))
    (modifies rm(b),flags(of,cf))
    (writes rm(b),flags(of,cf))
    (dest=rm(b))
    (param=1)
    (code 0xD0 mrm reg(value(r)));

  opcode value(n)
    (reads rm(v))
    (modifies rm(v),flags(of,cf))
    (writes rm(v),flags(of,cf))
    (dest=rm(v))
    (param=1)
    (code 0xD1 mrm reg(value(r)));

  opcode value(n)
    (reads rm(b))
    (modifies rm(b),flags(of,cf))
    (writes rm(b),flags(of,cf))
    (dest=rm(b))
    (param=cl)
    (code 0xD2 mrm reg(value(r)));

  opcode value(n)
    (reads rm(v))
    (modifies rm(v),flags(of,cf))
    (writes rm(v),flags(of,cf))
    (dest=rm(v))
    (param=cl)
    (code 0xD3 mrm reg(value(r)));
} macro;

set macro "group d0 4-7" (n,r) {;
  opcode value(n)
    (reads rm(b))
    (modifies rm(b),flags(of,cf,sf,zf,pf,af))
    (writes rm(b),flags(of,cf,sf,zf,pf,af))
    (dest=rm(b))
    (param=1)
    (code 0xD0 mrm reg(value(r)));

  opcode value(n)
    (reads rm(v))
    (modifies rm(v),flags(of,cf,sf,zf,pf,af))
    (writes rm(v),flags(of,cf,sf,zf,pf,af))
    (dest=rm(v))
    (param=1)
    (code 0xD1 mrm reg(value(r)));

  opcode value(n)
    (reads rm(b))
    (modifies rm(b),flags(of,cf,sf,zf,pf,af))
    (writes rm(b),flags(of,cf,sf,zf,pf,af))
    (dest=rm(b))
    (param=cl)
    (code 0xD2 mrm reg(value(r)));

  opcode value(n)
    (reads rm(v))
    (modifies rm(v),flags(of,cf,sf,zf,pf,af))
    (writes rm(v),flags(of,cf,sf,zf,pf,af))
    (dest=rm(v))
    (param=cl)
    (code 0xD3 mrm reg(value(r)));
} macro;

macro "group d0 0-3" ("ROL", 0);
macro "group d0 0-3" ("ROR", 1);
macro "group d0 0-3" ("RCL", 2);
macro "group d0 0-3" ("RCR", 3);

macro "group d0 4-7" ("SHL", 4);
macro "group d0 4-7" ("SHR", 5);
macro "group d0 4-7" ("SAR", 7);


opcode "AAM"
  (comment "AAD ascii adjust AX before multiply")
  (comment "TODO: Not valid in x64 long mode")
  (reads ax, d)
  (modifies ax)
  (writes ax, flags(sf,zf,pf,of,af,cf))
  (param=d)
  (code 0xD4 d=immediate(b));

opcode "AAD"
  (comment "AAD ascii adjust AX before division")
  (comment "TODO: Not valid in x64 long mode")
  (reads ax, d)
  (modifies ax)
  (writes ax, flags(sf,zf,pf,of,af,cf))
  (param=d)
  (code 0xD5 d=immediate(b));

opcode "SALC"
  (comment "Undocumented Intel opcode")
  (reads flags(cf))
  (modifies al)
  (writes al)
  (code 0xD6);

opcode "XLAT"
  (reads al, bv)
  (modifies al)
  (writes al)
  (code 0xD7);

opcode "FLD"
  (comment "FLD [esc]11011001 st(i) to st(0)")
  (reads fpu(top),st(rm))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push st(rm))
  (dest=st(0))
  (param=st(rm))
  (code 0xD9 mrm mod(3) reg(0) fpu);

opcode "FLD"
  (comment "FLD MF=0 [esc]11011 [mf]00 [esc]1 float32 from memory")
  (reads fpu(top),rm(f32))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push rm(f32))
  (dest=st(0))
  (param=rm(f32))
  (code 0xD9 mrm mod(!3) reg(0) fpu);

opcode "FILD"
  (comment "FLD MF=1 [esc]11011 [mf]01 [esc]1 int32 from memory")
  (reads fpu(top),rm(sdw))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push rm(sdw))
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDB mrm mod(!3) reg(0) fpu);

opcode "FLD"
  (comment "FLD MF=1 [esc]11011011 float80 from memory")
  (reads fpu(top),rm(f80))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push rm(f80))
  (dest=st(0))
  (param=rm(f80))
  (code 0xDB mrm mod(!3) reg(5) fpu);

opcode "FLD"
  (comment "FLD MF=1 [esc]11011 [mf]10 [esc]1 float64 from memory")
  (reads fpu(top),rm(f64))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push rm(f64))
  (dest=st(0))
  (param=rm(f64))
  (code 0xDD mrm mod(!3) reg(0) fpu);

opcode "FILD"
  (comment "FLD MF=1 [esc]11011 [mf]11 [esc]1 int16 from memory")
  (reads fpu(top),rm(sw))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push rm(sw))
  (dest=st(0))
  (param=rm(sw))
  (code 0xDF mrm mod(!3) reg(0) fpu);

opcode "FBLD"
  (comment "FLD [esc]11011111 int64 from memory")
  (reads fpu(top),rm(f80bcd))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push rm(f80bcd))
  (dest=st(0))
  (param=rm(f80bcd))
  (code 0xDF mrm mod(!3) reg(4) fpu);

opcode "FILD"
  (comment "FLD [esc]11011111 int64 from memory")
  (reads fpu(top),rm(sqw))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push rm(sqw))
  (dest=st(0))
  (param=rm(sqw))
  (code 0xDF mrm mod(!3) reg(5) fpu);

opcode "FLD1"
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push 1)
  (comment "0xD9 0xE8 aka mod==3 reg=5 rm=0")
  (dest=st(0))
  (param=1)
  (code 0xD9 mrm mod(3) reg(5) rm(0) fpu);

opcode "FLDL2T"
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push constant("log2(10)"))
  (comment "0xD9 0xE9 aka mod==3 reg=5 rm=1")
  (dest=st(0))
  (param=constant("log2(10)"))
  (code 0xD9 mrm mod(3) reg(5) rm(1) fpu);

opcode "FLDL2E"
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push constant("log2(e)"))
  (comment "0xD9 0xEA aka mod==3 reg=5 rm=2")
  (dest=st(0))
  (param=constant("log2(e)"))
  (code 0xD9 mrm mod(3) reg(5) rm(2) fpu);

opcode "FLDPI"
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push constant("pi"))
  (comment "0xD9 0xEB aka mod==3 reg=5 rm=3")
  (dest=st(0))
  (param=constant("pi"))
  (code 0xD9 mrm mod(3) reg(5) rm(3) fpu);

opcode "FLDLG2"
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push constant("log10(2)"))
  (comment "0xD9 0xEB aka mod==3 reg=5 rm=4")
  (dest=st(0))
  (param=constant("log10(2)"))
  (code 0xD9 mrm mod(3) reg(5) rm(4) fpu);

opcode "FLDLN2"
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push constant("loge(2)"))
  (comment "0xD9 0xEB aka mod==3 reg=5 rm=5")
  (dest=st(0))
  (param=constant("loge(2)"))
  (code 0xD9 mrm mod(3) reg(5) rm(5) fpu);

opcode "FLDZ"
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top),st(0))
  (fpu stack push 0)
  (comment "0xD9 0xEB aka mod==3 reg=5 rm=6")
  (dest=st(0))
  (param=0)
  (code 0xD9 mrm mod(3) reg(5) rm(6) fpu);

opcode "FST"
  (comment "FLD MF=0 [esc]11011 [mf]00 [esc]1 float32 from memory")
  (writes rm(f32))
  (modifies rm(f32))
  (reads st(0))
  (param=st(0))
  (dest=rm(f32))
  (code 0xD9 mrm mod(!3) reg(2) fpu);

opcode "FIST"
  (comment "FLD MF=1 [esc]11011 [mf]01 [esc]1 int32 from memory")
  (writes rm(sdw))
  (modifies rm(sdw))
  (reads st(0))
  (param=st(0))
  (dest=rm(sdw))
  (code 0xDB mrm mod(!3) reg(2) fpu);

opcode "FST"
  (comment "FLD MF=1 [esc]11011 [mf]10 [esc]1 float64 from memory")
  (writes rm(f64))
  (modifies rm(f64))
  (reads st(0))
  (param=st(0))
  (dest=rm(f64))
  (code 0xDD mrm mod(!3) reg(2) fpu);

opcode "FIST"
  (comment "FLD MF=1 [esc]11011 [mf]11 [esc]1 int16 from memory")
  (writes rm(sw))
  (modifies rm(sw))
  (reads st(0))
  (param=st(0))
  (dest=rm(sw))
  (code 0xDF mrm mod(!3) reg(2) fpu);

opcode "FST"
  (comment "FLD [esc]11011101 st(0) to st(i)")
  (reads st(0))
  (writes st(rm))
  (param=st(0))
  (dest=st(rm))
  (code 0xDD mrm mod(3) reg(2) fpu);

opcode "FSTP"
  (comment "FLD MF=0 [esc]11011 [mf]00 [esc]1 float32 from memory")
  (fpu stack pop rm(f32))
  (writes fpu(top),rm(f32))
  (modifies fpu(top))
  (reads fpu(top),st(0))
  (param=st(0))
  (dest=rm(f32))
  (code 0xD9 mrm mod(!3) reg(3) fpu);

opcode "FISTP"
  (comment "FLD MF=1 [esc]11011 [mf]01 [esc]1 int32 from memory")
  (fpu stack pop rm(sdw))
  (writes fpu(top),rm(sdw))
  (modifies fpu(top))
  (reads fpu(top),st(0))
  (param=st(0))
  (dest=rm(sdw))
  (code 0xDB mrm mod(!3) reg(3) fpu);

opcode "FSTP"
  (comment "FLD MF=1 [esc]11011 [mf]10 [esc]1 float64 from memory")
  (fpu stack pop rm(f64))
  (writes fpu(top),rm(f64))
  (modifies fpu(top))
  (reads fpu(top),st(0))
  (param=st(0))
  (dest=rm(f64))
  (code 0xDD mrm mod(!3) reg(3) fpu);

opcode "FISTP"
  (comment "FLD MF=1 [esc]11011 [mf]11 [esc]1 int16 from memory")
  (fpu stack pop rm(sw))
  (writes fpu(top),rm(sw))
  (modifies fpu(top))
  (reads fpu(top),st(0))
  (param=st(0))
  (dest=rm(sw))
  (code 0xDF mrm mod(!3) reg(3) fpu);

opcode "FSTP"
  (comment "FLD [esc]11011101 st(0) to st(i)")
  (fpu stack pop st(rm))
  (reads fpu(top),st(0))
  (writes fpu(top),st(rm))
  (modifies fpu(top))
  (param=st(0))
  (dest=st(rm))
  (code 0xDD mrm mod(3) reg(3) fpu);

opcode "FISTP"
  (comment "FLD MF=1 [esc]11011111 int64 from memory")
  (fpu stack pop rm(sqw))
  (writes fpu(top),rm(sqw))
  (reads fpu(top),st(0))
  (modifies fpu(top))
  (param=st(0))
  (dest=rm(sqw))
  (code 0xDF mrm mod(!3) reg(7) fpu);

opcode "FSTP"
  (comment "FLD MF=1 [esc]11011111 float80 from memory")
  (fpu stack pop rm(f80))
  (writes fpu(top),rm(f80))
  (reads fpu(top),st(0))
  (modifies fpu(top))
  (param=st(0))
  (dest=rm(f80))
  (code 0xDB mrm mod(!3) reg(7) fpu);

opcode "FBSTP"
  (comment "FLD MF=1 [esc]11011111 float80bcd from memory")
  (fpu stack pop rm(f80bcd))
  (writes fpu(top),rm(f80bcd))
  (reads fpu(top),st(0))
  (modifies fpu(top))
  (param=st(0))
  (dest=rm(f80bcd))
  (code 0xDF mrm mod(!3) reg(6) fpu);

opcode "FXCH"
  (comment "FXCH st(i) and st(0)")
  (reads st(rm),st(0))
  (writes st(rm),st(0))
  (dest=st(0))
  (param=st(rm))
  (code 0xD9 mrm mod(3) reg(1) fpu);

opcode "FCOM"
  (comment "FCOM MF=0 [esc]11011 [mf]00 [esc]0 float32 from memory")
  (reads rm(f32),st(0))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=rm(f32))
  (code 0xD8 mrm mod(!3) reg(2) fpu);

opcode "FICOM"
  (comment "FCOM MF=1 [esc]11011 [mf]01 [esc]0 int32 from memory")
  (reads rm(sdw),st(0))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDA mrm mod(!3) reg(2) fpu);

opcode "FCOM"
  (comment "FCOM MF=2 [esc]11011 [mf]10 [esc]0 float64 from memory")
  (reads rm(f64),st(0))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=rm(f64))
  (code 0xDC mrm mod(!3) reg(2) fpu);

opcode "FICOM"
  (comment "FCOM MF=3 [esc]11011 [mf]11 [esc]0 int16 from memory")
  (reads rm(sw),st(0))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=rm(sw))
  (code 0xDE mrm mod(!3) reg(2) fpu);

opcode "FCOM"
  (comment "FCOM [esc]11011000 st(i)")
  (reads st(rm),st(0))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=st(rm))
  (code 0xD8 mrm mod(3) reg(2) fpu);

opcode "FCOMP"
  (comment "FCOMP MF=0 [esc]11011 [mf]00 [esc]0 float32 from memory")
  (reads fpu(top),rm(f32),st(0))
  (writes fpu(top))
  (modifies fpu(top))
  (fpu stack pop st(0))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=rm(f32))
  (code 0xD8 mrm mod(!3) reg(3) fpu);

opcode "FICOMP"
  (comment "FCOMP MF=1 [esc]11011 [mf]01 [esc]0 int32 from memory")
  (reads fpu(top),rm(sdw),st(0))
  (writes fpu(top))
  (modifies fpu(top))
  (fpu stack pop st(0))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDA mrm mod(!3) reg(3) fpu);

opcode "FCOMP"
  (comment "FCOMP MF=2 [esc]11011 [mf]10 [esc]0 float64 from memory")
  (fpu stack pop st(0))
  (reads fpu(top),rm(f64),st(0))
  (writes fpu(top))
  (modifies fpu(top))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=rm(f64))
  (code 0xDC mrm mod(!3) reg(3) fpu);

opcode "FICOMP"
  (comment "FCOMP MF=3 [esc]11011 [mf]11 [esc]0 int16 from memory")
  (fpu stack pop st(0))
  (reads fpu(top),rm(sw),st(0))
  (writes fpu(top))
  (modifies fpu(top))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=rm(sw))
  (code 0xDE mrm mod(!3) reg(3) fpu);

opcode "FCOMP"
  (comment "FCOMP [esc]11011000 st(i)")
  (fpu stack pop st(0))
  (reads fpu(top),st(rm),st(0))
  (writes fpu(top))
  (modifies fpu(top))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=st(rm))
  (code 0xD8 mrm mod(3) reg(3) fpu);

opcode "FCOMPP"
  (comment "FCOMPP [esc]11011000 st(i)")
  (fpu stack pop st(0),st(1))
  (reads fpu(top),st(0),st(1))
  (writes fpu(top))
  (modifies fpu(top))
  (comment "TODO: modifies FPU condition flags")
  (dest=st(0))
  (param=st(1))
  (code 0xDE mrm mod(3) reg(3) rm(1) fpu);

opcode "FTST"
  (comment "FTST [esc]11011001 st(0) (compares against 0.0)")
  (reads st(0))
  (comment "TODO: Modifies FPU condition flags")
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(4) rm(4) fpu);

opcode "FXAM"
  (comment "FXAM [esc]11011001 st(0)")
  (reads st(0))
  (comment "TODO: Modifies FPU condition flags")
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(4) rm(5) fpu);

opcode "FADD"
  (comment "FADD MF=0 [esc]11011 [mf]00 [esc]0 st(0) += mem(float32)")
  (reads rm(f32),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f32))
  (code 0xD8 mrm mod(!3) reg(0) fpu);

opcode "FIADD"
  (comment "FADD MF=1 [esc]11011 [mf]01 [esc]0 st(0) += mem(int32)")
  (reads rm(sdw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDA mrm mod(!3) reg(0) fpu);

opcode "FADD"
  (comment "FADD MF=2 [esc]11011 [mf]10 [esc]0 st(0) += mem(float64)")
  (reads rm(f64),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f64))
  (code 0xDC mrm mod(!3) reg(0) fpu);

opcode "FIADD"
  (comment "FADD MF=3 [esc]11011 [mf]11 [esc]0 st(0) += mem(int16)")
  (reads rm(sw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sw))
  (code 0xDE mrm mod(!3) reg(0) fpu);

opcode "FADD"
  (comment "FADD st(0) += st(i), no pop d=0 P=0")
  (reads st(rm),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(rm))
  (code 0xD8 mrm mod(3) reg(0) fpu);

if value("cpulevel") < 686 {;
  opcode "FADD"
    (comment "FADD st(0) += st(i), pop d=0 P=1, useless, redefined by Intel on Pentium Pro for conditional FP moves")
    (reads st(rm),st(0),fpu(top))
    (modifies st(0),fpu(top))
    (writes st(0),fpu(top))
    (fpu stack pop st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(0) fpu);
} if;

opcode "FADD"
  (comment "FADD st(i) += st(0), no pop d=1 P=0")
  (reads st(rm),st(0))
  (modifies st(rm))
  (writes st(rm))
  (dest=st(rm))
  (param=st(0))
  (code 0xDC mrm mod(3) reg(0) fpu);

opcode "FADD"
  (comment "FADD st(i) += st(0), pop d=1 P=1")
  (reads st(rm),st(0),fpu(top))
  (modifies st(rm),fpu(top))
  (writes st(rm),fpu(top))
  (fpu stack pop st(0))
  (dest=st(rm))
  (param=st(0))
  (code 0xDE mrm mod(3) reg(0) fpu);

opcode "FSUB"
  (comment "FSUB MF=0 [esc]11011 [mf]00 [esc]0 st(0) -= mem(float32)")
  (reads rm(f32),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f32))
  (code 0xD8 mrm mod(!3) reg(4) fpu);

opcode "FISUB"
  (comment "FSUB MF=1 [esc]11011 [mf]01 [esc]0 st(0) -= mem(int32)")
  (reads rm(sdw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDA mrm mod(!3) reg(4) fpu);

opcode "FSUB"
  (comment "FSUB MF=2 [esc]11011 [mf]10 [esc]0 st(0) -= mem(float64)")
  (reads rm(f64),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f64))
  (code 0xDC mrm mod(!3) reg(4) fpu);

opcode "FISUB"
  (comment "FSUB MF=3 [esc]11011 [mf]11 [esc]0 st(0) -= mem(int16)")
  (reads rm(sw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sw))
  (code 0xDE mrm mod(!3) reg(4) fpu);

opcode "FSUB"
  (comment "FSUB st(0) -= st(i), no pop d=0 P=0")
  (reads st(rm),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(rm))
  (code 0xD8 mrm mod(3) reg(4) fpu);

if value("cpulevel") < 686 {;
  opcode "FSUB"
    (comment "FSUB st(0) -= st(i), pop d=0 P=1, useless, redefined by Intel on Pentium Pro for conditional FP moves")
    (reads st(rm),st(0),fpu(top))
    (modifies st(0),fpu(top))
    (writes st(0),fpu(top))
    (fpu stack pop st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(4) fpu);
} if;

opcode "FSUB"
  (comment "FSUB st(i) -= st(0), no pop d=1 P=0")
  (reads st(rm),st(0))
  (modifies st(rm))
  (writes st(rm))
  (dest=st(rm))
  (param=st(0))
  (code 0xDC mrm mod(3) reg(4) fpu);

opcode "FSUB"
  (comment "FSUB st(i) -= st(0), pop d=1 P=1")
  (reads st(rm),st(0),fpu(top))
  (modifies st(rm),fpu(top))
  (writes st(rm),fpu(top))
  (fpu stack pop st(0))
  (dest=st(rm))
  (param=st(0))
  (code 0xDE mrm mod(3) reg(4) fpu);

opcode "FSUBR"
  (comment "FSUBR MF=0 [esc]11011 [mf]00 [esc]0 st(0) = mem(float32) - st(0)")
  (reads rm(f32),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f32))
  (code 0xD8 mrm mod(!3) reg(5) fpu);

opcode "FISUBR"
  (comment "FSUBR MF=1 [esc]11011 [mf]01 [esc]0 st(0) = mem(int32) - st(0)")
  (reads rm(sdw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDA mrm mod(!3) reg(5) fpu);

opcode "FSUBR"
  (comment "FSUBR MF=2 [esc]11011 [mf]10 [esc]0 st(0) = mem(float64) - st(0)")
  (reads rm(f64),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f64))
  (code 0xDC mrm mod(!3) reg(5) fpu);

opcode "FISUBR"
  (comment "FSUBR MF=3 [esc]11011 [mf]11 [esc]0 st(0) = mem(int16) - st(0)")
  (reads rm(sw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sw))
  (code 0xDE mrm mod(!3) reg(5) fpu);

opcode "FSUBR"
  (comment "FSUBR st(0) = st(i) - st(0), no pop d=0 P=0")
  (reads st(rm),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(rm))
  (code 0xD8 mrm mod(3) reg(5) fpu);

if value("cpulevel") < 686 {;
  opcode "FSUBR"
    (comment "FSUBR st(0) = st(i) - st(0), pop d=0 P=1, useless, redefined by Intel on Pentium Pro for conditional FP moves")
    (reads st(rm),st(0),fpu(top))
    (modifies st(0),fpu(top))
    (writes st(0),fpu(top))
    (fpu stack pop st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(5) fpu);
} if;

opcode "FSUBR"
  (comment "FSUBR st(i) = st(0) - st(i), no pop d=1 P=0")
  (reads st(rm),st(0))
  (modifies st(rm))
  (writes st(rm))
  (dest=st(rm))
  (param=st(0))
  (code 0xDC mrm mod(3) reg(5) fpu);

opcode "FSUBR"
  (comment "FSUBR st(i) = st(0) - st(i), pop d=1 P=1")
  (reads st(rm),st(0),fpu(top))
  (modifies st(rm),fpu(top))
  (writes st(rm),fpu(top))
  (fpu stack pop st(0))
  (dest=st(rm))
  (param=st(0))
  (code 0xDE mrm mod(3) reg(5) fpu);

opcode "FMUL"
  (comment "FMUL MF=0 [esc]11011 [mf]00 [esc]0 st(0) *= mem(float32)")
  (reads rm(f32),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f32))
  (code 0xD8 mrm mod(!3) reg(1) fpu);

opcode "FIMUL"
  (comment "FMUL MF=1 [esc]11011 [mf]01 [esc]0 st(0) *= mem(int32)")
  (reads rm(sdw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDA mrm mod(!3) reg(1) fpu);

opcode "FMUL"
  (comment "FMUL MF=2 [esc]11011 [mf]10 [esc]0 st(0) *= mem(float64)")
  (reads rm(f64),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f64))
  (code 0xDC mrm mod(!3) reg(1) fpu);

opcode "FIMUL"
  (comment "FMUL MF=3 [esc]11011 [mf]11 [esc]0 st(0) *= mem(int16)")
  (reads rm(sw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sw))
  (code 0xDE mrm mod(!3) reg(1) fpu);

opcode "FMUL"
  (comment "FMUL st(0) *= st(i), no pop d=0 P=0")
  (reads st(rm),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(rm))
  (code 0xD8 mrm mod(3) reg(1) fpu);

if value("cpulevel") < 686 {;
  opcode "FMUL"
    (comment "FMUL st(0) *= st(i), pop d=0 P=1, useless, redefined by Intel on Pentium Pro for conditional FP moves")
    (reads st(rm),st(0),fpu(top))
    (modifies st(0),fpu(top))
    (writes st(0),fpu(top))
    (fpu stack pop st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(1) fpu);
} if;

opcode "FMUL"
  (comment "FMUL st(i) *= st(0), no pop d=1 P=0")
  (reads st(rm),st(0))
  (modifies st(rm))
  (writes st(rm))
  (dest=st(rm))
  (param=st(0))
  (code 0xDC mrm mod(3) reg(1) fpu);

opcode "FMUL"
  (comment "FMUL st(i) *= st(0), pop d=1 P=1")
  (reads st(rm),st(0),fpu(top))
  (modifies st(rm),fpu(top))
  (writes st(rm),fpu(top))
  (fpu stack pop st(0))
  (dest=st(rm))
  (param=st(0))
  (code 0xDE mrm mod(3) reg(1) fpu);

opcode "FDIV"
  (comment "FDIV MF=0 [esc]11011 [mf]00 [esc]0 st(0) /= mem(float32)")
  (reads rm(f32),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f32))
  (code 0xD8 mrm mod(!3) reg(6) fpu);

opcode "FIDIV"
  (comment "FDIV MF=1 [esc]11011 [mf]01 [esc]0 st(0) /= mem(int32)")
  (reads rm(sdw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDA mrm mod(!3) reg(6) fpu);

opcode "FDIV"
  (comment "FDIV MF=2 [esc]11011 [mf]10 [esc]0 st(0) /= mem(float64)")
  (reads rm(f64),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f64))
  (code 0xDC mrm mod(!3) reg(6) fpu);

opcode "FIDIV"
  (comment "FDIV MF=3 [esc]11011 [mf]11 [esc]0 st(0) /= mem(int16)")
  (reads rm(sw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sw))
  (code 0xDE mrm mod(!3) reg(6) fpu);

opcode "FDIV"
  (comment "FDIV st(0) /= st(i), no pop d=0 P=0")
  (reads st(rm),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(rm))
  (code 0xD8 mrm mod(3) reg(6) fpu);

if value("cpulevel") < 686 {;
  opcode "FDIV"
    (comment "FDIV st(0) /= st(i), pop d=0 P=1, useless, redefined by Intel on Pentium Pro for conditional FP moves")
    (reads st(rm),st(0),fpu(top))
    (modifies st(0),fpu(top))
    (writes st(0),fpu(top))
    (fpu stack pop st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(6) fpu);
} if;

opcode "FDIV"
  (comment "FDIV st(i) /= st(0), no pop d=1 P=0")
  (reads st(rm),st(0))
  (modifies st(rm))
  (writes st(rm))
  (dest=st(rm))
  (param=st(0))
  (code 0xDC mrm mod(3) reg(6) fpu);

opcode "FDIV"
  (comment "FDIV st(i) /= st(0), pop d=1 P=1")
  (reads st(rm),st(0),fpu(top))
  (modifies st(rm),fpu(top))
  (writes st(rm),fpu(top))
  (fpu stack pop st(0))
  (dest=st(rm))
  (param=st(0))
  (code 0xDE mrm mod(3) reg(6) fpu);

opcode "FDIVR"
  (comment "FDIVR MF=0 [esc]11011 [mf]00 [esc]0 st(0) = mem(float32) / st(0)")
  (reads rm(f32),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f32))
  (code 0xD8 mrm mod(!3) reg(7) fpu);

opcode "FIDIVR"
  (comment "FDIVR MF=1 [esc]11011 [mf]01 [esc]0 st(0) = mem(int32) / st(0)")
  (reads rm(sdw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sdw))
  (code 0xDA mrm mod(!3) reg(7) fpu);

opcode "FDIVR"
  (comment "FDIVR MF=2 [esc]11011 [mf]10 [esc]0 st(0) = mem(float64) / st(0)")
  (reads rm(f64),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(f64))
  (code 0xDC mrm mod(!3) reg(7) fpu);

opcode "FIDIVR"
  (comment "FDIVR MF=3 [esc]11011 [mf]11 [esc]0 st(0) = mem(int16) / st(0)")
  (reads rm(sw),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=rm(sw))
  (code 0xDE mrm mod(!3) reg(7) fpu);

opcode "FDIVR"
  (comment "FDIVR st(0) = st(i) / st(0), no pop d=0 P=0")
  (reads st(rm),st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(rm))
  (code 0xD8 mrm mod(3) reg(7) fpu);

if value("cpulevel") < 686 {;
  opcode "FDIVR"
    (comment "FDIVR st(0) = st(i) / st(0), pop d=0 P=1, useless, redefined by Intel on Pentium Pro for conditional FP moves")
    (reads st(rm),st(0),fpu(top))
    (modifies st(0),fpu(top))
    (writes st(0),fpu(top))
    (fpu stack pop st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(7) fpu);
} if;

opcode "FDIVR"
  (comment "FDIVR st(i) = st(0) / st(i), no pop d=1 P=0")
  (reads st(rm),st(0))
  (modifies st(rm))
  (writes st(rm))
  (dest=st(rm))
  (param=st(0))
  (code 0xDC mrm mod(3) reg(7) fpu);

opcode "FDIVR"
  (comment "FDIVR st(i) = st(0) / st(i), pop d=1 P=1")
  (reads st(rm),st(0),fpu(top))
  (modifies st(rm),fpu(top))
  (writes st(rm),fpu(top))
  (fpu stack pop st(0))
  (dest=st(rm))
  (param=st(0))
  (code 0xDE mrm mod(3) reg(7) fpu);

opcode "FCHS"
  (comment "FCHS st(0) = -st(0)")
  (reads st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(4) rm(0) fpu);

opcode "FABS"
  (comment "FABS st(0) = fabs(st(0))")
  (reads st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(4) rm(1) fpu);

opcode "FPTAN"
  (comment "FPTAN st(0) = atan(st(0)), push(1.0)")
  (reads st(0))
  (modifies st(0),st(1),fpu(top))
  (writes st(0),st(1),fpu(top))
  (fpu stack push 1.0)
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(6) rm(2) fpu);

opcode "FPATAN"
  (comment "FPATAN st(1) = atan(st(1) / st(0)), pop")
  (reads st(0),st(1))
  (modifies st(0),st(1),fpu(top))
  (writes st(0),st(1),fpu(top))
  (fpu stack pop st(0))
  (dest=st(1))
  (param(0)=st(0))
  (param(1)=st(1))
  (code 0xD9 mrm mod(3) reg(6) rm(3) fpu);

opcode "FXTRACT"
  (comment "FPREM tmp=st(0), st(0) = exponent(tmp), push(significand(tmp))")
  (reads st(0))
  (modifies st(0),st(1),fpu(top))
  (writes st(0),st(1),fpu(top))
  (fpu stack push st(0))
  (dest=st(0))
  (param(0)=st(0))
  (param(1)=st(1))
  (code 0xD9 mrm mod(3) reg(6) rm(4) fpu);

if value("cpulevel") >= 386 {;
opcode "FPREM1"
  (comment "FPREM1 st(0) = remainder(st(0) / st(1))")
  (reads st(0),st(1))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param(0)=st(0))
  (param(1)=st(1))
  (code 0xD9 mrm mod(3) reg(6) rm(5) fpu);
} if;

opcode "F2XM1"
  (comment "F2XM1 st(0) = (2 ^ st(0)) - 1")
  (reads st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(6) rm(0) fpu);

opcode "FYL2X"
  (comment "FYL2X st(1) = (st(1) * log2(st(0))), pop")
  (reads st(0),st(1),fpu(top))
  (modifies st(0),st(1),fpu(top))
  (writes st(0),st(1),fpu(top))
  (fpu stack pop st(0))
  (dest=st(0))
  (param(0)=st(0))
  (param(1)=st(1))
  (code 0xD9 mrm mod(3) reg(6) rm(1) fpu);

opcode "FYL2XP1"
  (comment "FYL2XP1 st(1) = (st(1) * log2(st(0) + 1.0)), pop")
  (reads st(0),st(1),fpu(top))
  (modifies st(0),st(1),fpu(top))
  (writes st(0),st(1),fpu(top))
  (fpu stack pop st(0))
  (dest=st(0))
  (param(0)=st(0))
  (param(1)=st(1))
  (code 0xD9 mrm mod(3) reg(7) rm(1) fpu);

opcode "FPREM"
  (comment "FPREM st(0) = remainder(st(0) / st(1))")
  (reads st(0),st(1))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param(0)=st(0))
  (param(1)=st(1))
  (code 0xD9 mrm mod(3) reg(7) rm(0) fpu);

opcode "FSQRT"
  (comment "FSQRT st(0) = sqrt(st(0))")
  (reads st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(7) rm(2) fpu);

opcode "FRNDINT"
  (comment "FSQRT st(0) = floor(st(0))")
  (reads st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(7) rm(4) fpu);

opcode "FSCALE"
  (comment "FSCALE st(0) = st(0) * (2 ^ floor(st(1)))")
  (reads st(0),st(1))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param(0)=st(0))
  (param(1)=st(1))
  (code 0xD9 mrm mod(3) reg(7) rm(5) fpu);

opcode "FENI"
  (comment "Enable 8087 interrrupts")
  (modifies fpu(all))
  (writes fpu(all))
  (code 0xDB mrm mod(3) reg(4) rm(0) fpu);

opcode "FDISI"
  (comment "Disable 8087 interrupts")
  (comment "TODO: FPU state")
  (code 0xDB mrm mod(3) reg(4) rm(1) fpu);

opcode "FCLEX"
  (comment "Clear 8087 exceptions with WAIT")
  (comment "TODO: FPU state")
  (code 0x9B 0xDB mrm mod(3) reg(4) rm(2) fpu);

opcode "FNCLEX"
  (comment "Clear 8087 exceptions")
  (comment "TODO: FPU state")
  (code 0xDB mrm mod(3) reg(4) rm(2) fpu);

opcode "FINIT"
  (comment "FINIT 8087 state with WAIT prefix")
  (comment "TODO: FPU state")
  (code 0x9B 0xDB mrm mod(3) reg(4) rm(3) fpu);

opcode "FNINIT"
  (comment "FINIT 8087 state")
  (comment "TODO: FPU state")
  (code 0xDB mrm mod(3) reg(4) rm(3) fpu);

opcode "FDECSTP"
  (comment "Decrement stack pointer")
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top))
  (code 0xD9 mrm mod(3) reg(6) rm(6) fpu);

opcode "FINCSTP"
  (comment "Increment stack pointer")
  (reads fpu(top))
  (modifies fpu(top))
  (writes fpu(top))
  (code 0xD9 mrm mod(3) reg(6) rm(7) fpu);

opcode "FFREE"
  (comment "Free st(i)")
  (comment "TODO: FPU state")
  (modifies st(rm))
  (dest=st(rm))
  (code 0xDD mrm mod(3) reg(0) fpu);

opcode "FNOP"
  (code 0xD9 mrm mod(3) reg(2) rm(0) fpu);

opcode "FLDCW"
  (comment "Load control word from memory")
  (reads rm(w))
  (writes fpu(cw))
  (param=rm(w))
  (code 0xD9 mrm mod(!3) reg(5) fpu);

opcode "FSTCW"
  (comment "Store control word to memory")
  (reads fpu(cw))
  (writes rm(w))
  (dest=rm(w))
  (code 0xD9 mrm mod(!3) reg(7) fpu);

opcode "FSTSW"
  (comment "Store status word to memory")
  (reads fpu(sw))
  (writes rm(w))
  (dest=rm(w))
  (code 0xDD mrm mod(!3) reg(7) fpu);

opcode "FLDENV"
  (comment "Load FPU environment from memory")
  (reads rm(f87env))
  (writes fpu(all))
  (param=rm(f87env))
  (code 0xD9 mrm mod(!3) reg(4) fpu);

opcode "FSTENV"
  (comment "Store FPU environment to memory")
  (reads fpu(all))
  (writes rm(f87env))
  (dest=rm(f87env))
  (code 0xD9 mrm mod(!3) reg(6) fpu);

opcode "FRSTOR"
  (comment "Load FPU state from memory")
  (reads rm(f87state))
  (writes fpu(all))
  (param=rm(f87state))
  (code 0xDD mrm mod(!3) reg(4) fpu);

opcode "FSAVE"
  (comment "Store FPU state to memory")
  (reads fpu(all))
  (writes rm(f87state))
  (dest=rm(f87state))
  (code 0xDD mrm mod(!3) reg(6) fpu);

opcode "LOOPNZ"
  (comment "ipv is evaluated after decoding instruction")
  (comment "--(E)CX, if (E)CX != 0 and !ZF, jump")
  (reads ipv, cv, flags(zf))
  (modifies ipv, cv)
  (writes ipv, cv)
  (param=n)
  (code 0xE0 p=immediate(sb) n=(ipv+p));

opcode "LOOPZ"
  (comment "ipv is evaluated after decoding instruction")
  (comment "--(E)CX, if (E)CX != 0 and ZF, jump")
  (reads ipv, cv, flags(zf))
  (modifies ipv, cv)
  (writes ipv, cv)
  (param=n)
  (code 0xE1 p=immediate(sb) n=(ipv+p));

opcode "LOOP"
  (comment "ipv is evaluated after decoding instruction")
  (comment "if --(E)CX != 0, jump")
  (reads ipv, cv)
  (modifies ipv, cv)
  (writes ipv, cv)
  (param=n)
  (code 0xE2 p=immediate(sb) n=(ipv+p));

opcode "JCXZ"
  (comment "ipv is evaluated after decoding instruction")
  (comment "Jump if (E)CX == 0")
  (reads ipv, cv)
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0xE3 p=immediate(sb) n=(ipv+p));

opcode "IN"
  (writes al)
  (dest=al)
  (param=p)
  (code 0xE4 p=immediate(b));

opcode "IN"
  (writes av)
  (dest=av)
  (param=p)
  (code 0xE5 p=immediate(b));

opcode "OUT"
  (reads al)
  (param(0)=p)
  (param(1)=al)
  (code 0xE6 p=immediate(b));

opcode "OUT"
  (reads av)
  (param(0)=p)
  (param(1)=av)
  (code 0xE7 p=immediate(b));

opcode "CALL"
  (comment "ipv is evaluated after decoding CALL instruction")
  (comment "relative address is 16-bit signed or 32-bit signed")
  (stack push ipv)
  (reads ipv)
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0xE8 p=immediate(sv) n=(ipv+p));

opcode "JMP"
  (comment "ipv is evaluated after decoding JMP instruction")
  (comment "relative address is 16-bit signed or 32-bit signed")
  (reads ipv)
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0xE9 p=immediate(sv) n=(ipv+p));

opcode "JMP"
  (comment "jmp far address, 16:16 or 16:32")
  (writes ipv,cs)
  (param=p)
  (code 0xEA p=immediate(fpv));

opcode "JMP"
  (comment "ipv is evaluated after decoding JMP instruction")
  (reads ipv)
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0xEB p=immediate(sb) n=(ipv+p));

opcode "IN"
  (writes al)
  (dest=al)
  (param=dx)
  (code 0xEC);

opcode "IN"
  (writes av)
  (dest=av)
  (param=dx)
  (code 0xED);

opcode "OUT"
  (reads al)
  (param(0)=dx)
  (param(1)=al)
  (code 0xEE);

opcode "OUT"
  (reads av)
  (param(0)=dx)
  (param(1)=av)
  (code 0xEF);

prefix "LOCK"
  (comment "lock prefix")
  (desc "lock prefix")
  (code 0xF0)
  (lock=1);

if value("cpulevel") >= 386 {;
  opcode "INT"
    (comment "INT 1h or ICEBP")
    (desc "INT 1h, or if conditions are right, ICEBP")
    (modifies all)
    (param=1)
    (code 0xF1);
} if;
else {;
  if value("cpulevel") <= 86 {;
    prefix "LOCK"
      (comment "lock prefix (alias on 8086)")
      (desc "lock prefix")
      (code 0xF1)
      (lock=1);
  } if;
} if;

prefix "REPNZ"
  (comment "repeat while not z")
  (desc "rep while not z")
  (code 0xF2)
  (rep=!z);

prefix "REPZ"
  (comment "repeat while z")
  (desc "rep while z")
  (code 0xF3)
  (rep=z);

if (value("cpulevel") >= 186) and isset("necv20")
prefix "REPNC"
  (comment "repeat while not c")
  (desc "rep while not c")
  (code 0x64)
  (rep=!c);

if (value("cpulevel") >= 186) and isset("necv20")
prefix "REPC"
  (comment "repeat while c")
  (desc "rep while c")
  (code 0x65)
  (rep=c);

opcode "HLT"
  (code 0xF4);

opcode "CMC"
  (reads flags(cf))
  (modifies flags(cf))
  (writes flags(cf))
  (code 0xF5);

opcode "TEST"
  (reads rm(b))
  (modifies rm(b),flags(cf,af,sf,zf,pf,of))
  (writes rm(b),flags(cf,af,sf,zf,pf,of))
  (dest=rm(b))
  (param=i)
  (code 0xF6 mrm i=immediate(b) reg(0));

opcode "TEST"
  (reads rm(v))
  (modifies rm(v),flags(cf,af,sf,zf,pf,of))
  (writes rm(v),flags(cf,af,sf,zf,pf,of))
  (dest=rm(v))
  (param=i)
  (code 0xF7 mrm i=immediate(v) reg(0));

opcode "NOT"
  (reads rm(b))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0xF6 mrm reg(2));

opcode "NOT"
  (reads rm(v))
  (modifies rm(v))
  (writes rm(v))
  (dest=rm(v))
  (code 0xF7 mrm reg(2));

opcode "NEG"
  (reads rm(b))
  (modifies rm(b),flags(cf,af,sf,zf,pf,of))
  (writes rm(b),flags(cf,af,sf,zf,pf,of))
  (dest=rm(b))
  (code 0xF6 mrm reg(3));

opcode "NEG"
  (reads rm(v))
  (modifies rm(v),flags(cf,af,sf,zf,pf,of))
  (writes rm(v),flags(cf,af,sf,zf,pf,of))
  (dest=rm(v))
  (code 0xF7 mrm reg(3));

opcode "MUL"
  (reads rm(b))
  (modifies rm(b),flags(cf,af,sf,zf,pf,of))
  (writes rm(b),flags(cf,af,sf,zf,pf,of))
  (dest=rm(b))
  (code 0xF6 mrm reg(4));

opcode "MUL"
  (reads rm(v))
  (modifies rm(v),flags(cf,af,sf,zf,pf,of))
  (writes rm(v),flags(cf,af,sf,zf,pf,of))
  (dest=rm(v))
  (code 0xF7 mrm reg(4));

opcode "IMUL"
  (reads rm(b))
  (modifies rm(b),flags(cf,af,sf,zf,pf,of))
  (writes rm(b),flags(cf,af,sf,zf,pf,of))
  (dest=rm(b))
  (code 0xF6 mrm reg(5));

opcode "IMUL"
  (reads rm(v))
  (modifies rm(v),flags(cf,af,sf,zf,pf,of))
  (writes rm(v),flags(cf,af,sf,zf,pf,of))
  (dest=rm(v))
  (code 0xF7 mrm reg(5));

opcode "DIV"
  (reads rm(b))
  (modifies rm(b),flags(cf,af,sf,zf,pf,of))
  (writes rm(b),flags(cf,af,sf,zf,pf,of))
  (dest=rm(b))
  (code 0xF6 mrm reg(6));

opcode "DIV"
  (reads rm(v))
  (modifies rm(v),flags(cf,af,sf,zf,pf,of))
  (writes rm(v),flags(cf,af,sf,zf,pf,of))
  (dest=rm(v))
  (code 0xF7 mrm reg(6));

opcode "IDIV"
  (reads rm(b))
  (modifies rm(b),flags(cf,af,sf,zf,pf,of))
  (writes rm(b),flags(cf,af,sf,zf,pf,of))
  (dest=rm(b))
  (code 0xF6 mrm reg(7));

opcode "IDIV"
  (reads rm(v))
  (modifies rm(v),flags(cf,af,sf,zf,pf,of))
  (writes rm(v),flags(cf,af,sf,zf,pf,of))
  (dest=rm(v))
  (code 0xF7 mrm reg(7));

opcode "CLC"
  (writes flags(cf))
  (code 0xF8);

opcode "STC"
  (writes flags(cf))
  (code 0xF9);

opcode "CLI"
  (writes flags(if))
  (code 0xFA);

opcode "STI"
  (writes flags(if))
  (code 0xFB);

opcode "CLD"
  (writes flags(df))
  (code 0xFC);

opcode "STD"
  (writes flags(df))
  (code 0xFD);

opcode "INC"
  (reads rm(b))
  (modifies rm(b),flags(of,sf,zf,af,pf))
  (writes rm(b),flags(of,sf,zf,af,pf))
  (dest=rm(b))
  (code 0xFE mrm reg(0));

opcode "INC"
  (reads rm(v))
  (modifies rm(v),flags(of,sf,zf,af,pf))
  (writes rm(v),flags(of,sf,zf,af,pf))
  (dest=rm(v))
  (code 0xFF mrm reg(0));

opcode "DEC"
  (reads rm(b))
  (modifies rm(b),flags(of,sf,zf,af,pf))
  (writes rm(b),flags(of,sf,zf,af,pf))
  (dest=rm(b))
  (code 0xFE mrm reg(1));

opcode "DEC"
  (reads rm(v))
  (modifies rm(v),flags(of,sf,zf,af,pf))
  (writes rm(v),flags(of,sf,zf,af,pf))
  (dest=rm(v))
  (code 0xFF mrm reg(1));

opcode "CALL"
  (reads rm(v),ipv)
  (modifies ipv,spv)
  (stack push ipv)
  (writes ipv)
  (dest=rm(v))
  (code 0xFF mrm reg(2));

opcode "CALL"
  (reads rm(fpv),ipv)
  (modifies cs,ipv,spv)
  (stack push cs,ipv)
  (writes cs,ipv)
  (dest=rm(fpv))
  (code 0xFF mrm reg(3) mod(!3));

opcode "JMP"
  (reads rm(v),ipv)
  (modifies ipv,spv)
  (stack push ipv)
  (writes cs,ipv)
  (dest=rm(v))
  (code 0xFF mrm reg(4));

opcode "JMP"
  (reads rm(fpv),ipv)
  (modifies cs,ipv,spv)
  (writes cs,ipv)
  (dest=rm(fpv))
  (code 0xFF mrm reg(5) mod(!3));

opcode "PUSH"
  (reads rm(v))
  (stack push rm(v))
  (modifies spv)
  (dest=rm(v))
  (code 0xFF mrm reg(6));

if value("cpulevel") >= 286
  opcode "SLDT"
    (comment "TODO: task register")
    (writes rm(v))
    (dest=rm(v))
    (code 0x0F 0x00 mrm reg(0));

if value("cpulevel") >= 286
  opcode "STR"
    (comment "TODO: task register")
    (writes rm(v))
    (dest=rm(v))
    (code 0x0F 0x00 mrm reg(1));

if value("cpulevel") >= 286
  opcode "LLDT"
    (comment "TODO: task register")
    (writes rm(v))
    (dest=rm(v))
    (code 0x0F 0x00 mrm reg(2));

if value("cpulevel") >= 286
  opcode "LTR"
    (comment "TODO: task register")
    (writes rm(v))
    (dest=rm(v))
    (code 0x0F 0x00 mrm reg(3));

if value("cpulevel") >= 286
  opcode "VERR"
    (comment "TODO: task register")
    (writes rm(v))
    (dest=rm(v))
    (code 0x0F 0x00 mrm reg(4));

if value("cpulevel") >= 286
  opcode "VERW"
    (comment "TODO: task register")
    (writes rm(v))
    (dest=rm(v))
    (code 0x0F 0x00 mrm reg(5));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "BRKEM"
    (comment "Break for 8080 emulation")
    (modifies all)
    (param=i)
    (code 0x0F 0xFF i=immediate(b));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "ADD4S"
    (reads far memory(v,seg,siv),siv,div,es)
    (writes far memory(v,es,div),siv,div)
    (modifies siv,div)
    (dest=far memory(v,es,div))
    (param=far memory(v,seg,siv))
    (code 0x0F 0x20);

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "SUB4S"
    (reads far memory(v,seg,siv),siv,div,es)
    (writes far memory(v,es,div),siv,div)
    (modifies siv,div)
    (dest=far memory(v,es,div))
    (param=far memory(v,seg,siv))
    (code 0x0F 0x22);

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "CMP4S"
    (reads far memory(v,seg,siv),siv,div,es)
    (writes far memory(v,es,div),siv,div)
    (modifies siv,div)
    (dest=far memory(v,es,div))
    (param=far memory(v,seg,siv))
    (code 0x0F 0x26);

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "ROL4"
    (reads rm(b))
    (modifies rm(b))
    (writes rm(b))
    (dest=rm(b))
    (code 0x0F 0x28 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "ROR4"
    (reads rm(b))
    (modifies rm(b))
    (writes rm(b))
    (dest=rm(b))
    (code 0x0F 0x2A mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "TEST1"
    (reads rm(b))
    (modifies flags(zf))
    (writes flags(zf))
    (param(0)=rm(b))
    (param(1)=cl)
    (code 0x0F 0x10 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "TEST1"
    (reads rm(v))
    (modifies flags(zf))
    (writes flags(zf))
    (param(0)=rm(v))
    (param(1)=cl)
    (code 0x0F 0x11 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "TEST1"
    (reads rm(b))
    (modifies flags(zf))
    (writes flags(zf))
    (param(0)=rm(b))
    (param(1)=i)
    (code 0x0F 0x18 mrm i=immediate(b) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "TEST1"
    (reads rm(v))
    (modifies flags(zf))
    (writes flags(zf))
    (param(0)=rm(v))
    (param(1)=i)
    (code 0x0F 0x19 mrm i=immediate(b) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "NOT1"
    (reads rm(b))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(b))
    (param(1)=cl)
    (code 0x0F 0x16 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "NOT1"
    (reads rm(v))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(v))
    (param(1)=cl)
    (code 0x0F 0x17 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "NOT1"
    (reads rm(b))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(b))
    (param(1)=i)
    (code 0x0F 0x1E mrm i=immediate(b) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "NOT1"
    (reads rm(v))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(v))
    (param(1)=i)
    (code 0x0F 0x1F mrm i=immediate(b) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "CLR1"
    (reads rm(b))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(b))
    (param(1)=cl)
    (code 0x0F 0x12 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "CLR1"
    (reads rm(v))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(v))
    (param(1)=cl)
    (code 0x0F 0x13 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "CLR1"
    (reads rm(b))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(b))
    (param(1)=i)
    (code 0x0F 0x1A mrm i=immediate(b) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "CLR1"
    (reads rm(v))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(v))
    (param(1)=i)
    (code 0x0F 0x1B mrm i=immediate(b) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "SET1"
    (reads rm(b))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(b))
    (param(1)=cl)
    (code 0x0F 0x14 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "SET1"
    (reads rm(v))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(v))
    (param(1)=cl)
    (code 0x0F 0x15 mrm reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "SET1"
    (reads rm(b))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(b))
    (param(1)=i)
    (code 0x0F 0x1C mrm i=immediate(b) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "SET1"
    (reads rm(v))
    (modifies rm(b),flags(zf))
    (writes rm(b),flags(zf))
    (param(0)=rm(v))
    (param(1)=i)
    (code 0x0F 0x1D mrm i=immediate(b) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "INS"
    (comment "reg1=rm reg2=reg    reg1=bit offset (modified by ins)  reg2=bit length")
    (reads far memory(b,es,div),rm(b),div,es)
    (writes far memory(b,es,div),rm(b),div)
    (modifies rm(b),div)
    (dest=far memory(v,es,div))
    (param(0)=rm(b))
    (param(1)=reg(b))
    (param(2)=av)
    (code 0x0F 0x31 mrm mod(3));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "INS"
    (comment "rm=bit offset (modified by ins)  imm=bit length")
    (reads far memory(b,es,div),rm(b),div,es)
    (writes far memory(b,es,div),rm(b),div)
    (modifies rm(b),div)
    (dest=far memory(v,es,div))
    (param(0)=rm(b))
    (param(1)=i)
    (param(2)=av)
    (code 0x0F 0x39 mrm i=immediate(b) mod(3) reg(0));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "EXT"
    (comment "reg1=rm reg2=reg    reg1=bit offset (modified by ins)  reg2=bit length")
    (reads far memory(b,seg,siv),rm(b),siv,seg)
    (modifies av,siv)
    (dest=av)
    (param(0)=rm(b))
    (param(1)=reg(b))
    (param(2)=far memory(v,seg,siv))
    (code 0x0F 0x33 mrm mod(3));

if (value("cpulevel") >= 186) and isset("necv20")
  opcode "EXT"
    (comment "rm=bit offset (modified by ins)  imm=bit length")
    (reads far memory(b,seg,siv),rm(b),siv,seg)
    (modifies av,siv)
    (dest=av)
    (param(0)=rm(b))
    (param(1)=i)
    (param(2)=far memory(v,seg,siv))
    (code 0x0F 0x3B mrm i=immediate(b) mod(3) reg(0));

if value("cpulevel") >= 286
opcode "LAR"
  (writes reg(v))
  (param=rm(v))
  (dest=reg(v))
  (code 0x0F 0x02 mrm);

if value("cpulevel") >= 286
opcode "CLTS"
  (comment "TODO: modifies machine status word")
  (code 0x0F 0x06 mrm);

if value("cpulevel") >= 286
opcode "SGDT"
  (comment "TODO: modifies...")
  (dest=rm(tw))
  (code 0x0F 0x01 mrm mod(!3) reg(0));

if value("cpulevel") >= 286
opcode "SIDT"
  (comment "TODO: modifies...")
  (dest=rm(tw))
  (code 0x0F 0x01 mrm mod(!3) reg(1));

if value("cpulevel") >= 286
opcode "LGDT"
  (comment "TODO: modifies...")
  (param=rm(tw))
  (code 0x0F 0x01 mrm mod(!3) reg(2));

if value("cpulevel") >= 286
opcode "LIDT"
  (comment "TODO: modifies...")
  (param=rm(tw))
  (code 0x0F 0x01 mrm mod(!3) reg(3));

if value("cpulevel") >= 286
opcode "SMSW"
  (comment "TODO: modifies...")
  (dest=rm(v))
  (code 0x0F 0x01 mrm reg(4));

if value("cpulevel") >= 286
opcode "LMSW"
  (comment "TODO: modifies...")
  (param=rm(v))
  (code 0x0F 0x01 mrm reg(6));

if value("cpulevel") >= 286
opcode "LSL"
  (comment "TODO: modifies...")
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x03 mrm);

if value("cpulevel") == 286
opcode "LOADALL"
  (modifies all)
  (code 0x0F 0x05);

if value("cpulevel") == 386
opcode "LOADALL"
  (modifies all)
  (param=far memory(b,es,div))
  (code 0x0F 0x07);

if value("fpulevel") >= 287
opcode "FSETPM"
  (comment "Opcode 0xDB 0xE4(1110 0100 = 11 100 100) (mod/reg/rm 3/4/4)")
  (code 0xDB mrm mod(3) reg(4) rm(4));

if value("cpulevel") >= 386
opcode "BSF"
  (reads rm(v))
  (modifies reg(v),flags(zf))
  (writes reg(v),flags(zf))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0xBC mrm);

if value("cpulevel") >= 386
opcode "BSR"
  (reads rm(v))
  (modifies reg(v),flags(zf))
  (writes reg(v),flags(zf))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0xBD mrm);

if value("cpulevel") >= 386
opcode "BT"
  (reads rm(v),reg(v))
  (modifies flags(cf))
  (writes flags(cf))
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xA3 mrm);

if value("cpulevel") >= 386
opcode "BT"
  (reads rm(v))
  (modifies flags(cf))
  (writes flags(cf))
  (dest=rm(v))
  (param=i)
  (code 0x0F 0xBA mrm i=immediate(b) reg(4));

if value("cpulevel") >= 386
opcode "BTC"
  (reads rm(v),reg(v))
  (modifies rm(v),flags(cf))
  (writes rm(v),flags(cf))
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xBB mrm);

if value("cpulevel") >= 386
opcode "BTC"
  (reads rm(v))
  (modifies rm(v),flags(cf))
  (writes rm(v),flags(cf))
  (dest=rm(v))
  (param=i)
  (code 0x0F 0xBA mrm i=immediate(b) reg(7));

if value("cpulevel") >= 386
opcode "BTR"
  (reads rm(v),reg(v))
  (modifies rm(v),flags(cf))
  (writes rm(v),flags(cf))
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xB3 mrm);

if value("cpulevel") >= 386
opcode "BTR"
  (reads rm(v))
  (modifies rm(v),flags(cf))
  (writes rm(v),flags(cf))
  (dest=rm(v))
  (param=i)
  (code 0x0F 0xBA mrm i=immediate(b) reg(6));

if value("cpulevel") >= 386
opcode "BTS"
  (reads rm(v),reg(v))
  (modifies rm(v),flags(cf))
  (writes rm(v),flags(cf))
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xAB mrm);

if value("cpulevel") >= 386
opcode "BTS"
  (reads rm(v))
  (modifies rm(v),flags(cf))
  (writes rm(v),flags(cf))
  (dest=rm(v))
  (param=i)
  (code 0x0F 0xBA mrm i=immediate(b) reg(5));

if value("cpulevel") == 386
opcode "XBTS"
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xA6 mrm);

if ((value("cpulevel") == 486) and (value("cpuyear") < 1992))
opcode "CMPXCHG"
  (dest=rm(b))
  (param=reg(b))
  (code 0x0F 0xA6 mrm);

if ((value("cpulevel") == 486) and (value("cpuyear") < 1992))
opcode "CMPXCHG"
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xA7 mrm);

if (((value("cpulevel") == 486) and (value("cpuyear") >= 1992)) or (value("cpulevel") > 486))
opcode "CMPXCHG"
  (dest=rm(b))
  (param=reg(b))
  (code 0x0F 0xB0 mrm);

if (((value("cpulevel") == 486) and (value("cpuyear") >= 1992)) or (value("cpulevel") > 486))
opcode "CMPXCHG"
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xB1 mrm);

if value("cpulevel") == 386
opcode "IBTS"
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xA7 mrm);

if value("cpulevel") == 386
opcode "LSS"
  (dest=reg(v))
  (param=rm(fpv))
  (reads rm(fpv))
  (writes reg(v),ss)
  (code 0x0F 0xB2 mrm mod(!3));

if value("cpulevel") == 386
opcode "LFS"
  (dest=reg(v))
  (param=rm(fpv))
  (reads rm(fpv))
  (writes reg(v),fs)
  (code 0x0F 0xB4 mrm mod(!3));

if value("cpulevel") == 386
opcode "LGS"
  (dest=reg(v))
  (param=rm(fpv))
  (reads rm(fpv))
  (writes reg(v),gs)
  (code 0x0F 0xB5 mrm mod(!3));

if value("cpulevel") == 386
opcode "SHLD"
  (dest=rm(v))
  (param(0)=reg(v))
  (param(1)=i)
  (reads rm(v),reg(v))
  (modifies rm(v))
  (writes rm(v))
  (code 0x0F 0xA4 mrm i=immediate(b));

if value("cpulevel") == 386
opcode "SHLD"
  (dest=rm(v))
  (param(0)=reg(v))
  (param(1)=cl)
  (reads rm(v),reg(v))
  (modifies rm(v))
  (writes rm(v))
  (code 0x0F 0xA5 mrm);

if value("cpulevel") == 386
opcode "SHRD"
  (dest=rm(v))
  (param(0)=reg(v))
  (param(1)=i)
  (reads rm(v),reg(v))
  (modifies rm(v))
  (writes rm(v))
  (code 0x0F 0xAC mrm i=immediate(b));

if value("cpulevel") == 386
opcode "SHRD"
  (dest=rm(v))
  (param(0)=reg(v))
  (param(1)=cl)
  (reads rm(v),reg(v))
  (modifies rm(v))
  (writes rm(v))
  (code 0x0F 0xAD mrm);

if value("cpulevel") >= 386 {;
opcode "JO"
  (reads ipv, flags(of))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x80 p=immediate(sv) n=(ipv+p));

opcode "JNO"
  (reads ipv, flags(of))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x81 p=immediate(sv) n=(ipv+p));

opcode "JC"
  (reads ipv, flags(cf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x82 p=immediate(sv) n=(ipv+p));

opcode "JNC"
  (reads ipv, flags(cf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x83 p=immediate(sv) n=(ipv+p));

opcode "JZ"
  (reads ipv, flags(zf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x84 p=immediate(sv) n=(ipv+p));

opcode "JNZ"
  (reads ipv, flags(zf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x85 p=immediate(sv) n=(ipv+p));

opcode "JNA"
  (reads ipv, flags(zf,cf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x86 p=immediate(sv) n=(ipv+p));

opcode "JA"
  (reads ipv, flags(zf,cf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x87 p=immediate(sv) n=(ipv+p));

opcode "JS"
  (reads ipv, flags(sf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x88 p=immediate(sv) n=(ipv+p));

opcode "JNS"
  (reads ipv, flags(sf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x89 p=immediate(sv) n=(ipv+p));

opcode "JP"
  (reads ipv, flags(pf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x8A p=immediate(sv) n=(ipv+p));

opcode "JNP"
  (reads ipv, flags(pf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x8B p=immediate(sv) n=(ipv+p));

opcode "JL"
  (reads ipv, flags(sf,of))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x8C p=immediate(sv) n=(ipv+p));

opcode "JNL"
  (reads ipv, flags(sf,of))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x8D p=immediate(sv) n=(ipv+p));

opcode "JNG"
  (reads ipv, flags(zf,sf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x8E p=immediate(sv) n=(ipv+p));

opcode "JG"
  (reads ipv, flags(zf,sf))
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0x0F 0x8F p=immediate(sv) n=(ipv+p));
} if;

if value("cpulevel") >= 386 {;
opcode "SETO"
  (reads ipv, flags(of))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x90 mrm reg(0));

opcode "SETNO"
  (reads ipv, flags(of))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x91 mrm reg(0));

opcode "SETC"
  (reads ipv, flags(cf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x92 mrm reg(0));

opcode "SETNC"
  (reads ipv, flags(cf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x93 mrm reg(0));

opcode "SETZ"
  (reads ipv, flags(zf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x94 mrm reg(0));

opcode "SETNZ"
  (reads ipv, flags(zf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x95 mrm reg(0));

opcode "SETNA"
  (reads ipv, flags(zf,cf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x96 mrm reg(0));

opcode "SETA"
  (reads ipv, flags(zf,cf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x97 mrm reg(0));

opcode "SETS"
  (reads ipv, flags(sf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x98 mrm reg(0));

opcode "SETNS"
  (reads ipv, flags(sf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x99 mrm reg(0));

opcode "SETP"
  (reads ipv, flags(pf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x9A mrm reg(0));

opcode "SETNP"
  (reads ipv, flags(pf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x9B mrm reg(0));

opcode "SETL"
  (reads ipv, flags(sf,of))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x9C mrm reg(0));

opcode "SETNL"
  (reads ipv, flags(sf,of))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x9D mrm reg(0));

opcode "SETNG"
  (reads ipv, flags(zf,sf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x9E mrm reg(0));

opcode "SETG"
  (reads ipv, flags(zf,sf))
  (modifies rm(b))
  (writes rm(b))
  (dest=rm(b))
  (code 0x0F 0x9F mrm reg(0));
} if;

if value("cpulevel") >= 386
opcode "MOV"
  (comment "Intel Pentium docs state: mod==3, reg=CR register, r/m=general register")
  (reads cr(reg))
  (writes rm(dw))
  (dest=rm(dw))
  (param=cr(reg))
  (code 0x0F 0x20 mrm mod(3));

if value("cpulevel") >= 386
opcode "MOV"
  (comment "Intel Pentium docs state: mod==3, reg=CR register, r/m=general register")
  (reads rm(dw))
  (writes cr(reg))
  (dest=cr(reg))
  (param=rm(dw))
  (code 0x0F 0x22 mrm mod(3));

if value("cpulevel") >= 386
opcode "MOV"
  (comment "Intel Pentium docs state: mod==3, reg=DR register, r/m=general register")
  (reads dr(reg))
  (writes rm(dw))
  (dest=rm(dw))
  (param=dr(reg))
  (code 0x0F 0x21 mrm mod(3));

if value("cpulevel") >= 386
opcode "MOV"
  (comment "Intel Pentium docs state: mod==3, reg=DR register, r/m=general register")
  (reads rm(dw))
  (writes dr(reg))
  (dest=dr(reg))
  (param=rm(dw))
  (code 0x0F 0x23 mrm mod(3));

if value("cpulevel") >= 386
opcode "MOV"
  (comment "Intel Pentium docs state: mod==3, reg=TR register, r/m=general register")
  (reads tr(reg))
  (writes rm(dw))
  (dest=rm(dw))
  (param=tr(reg))
  (code 0x0F 0x24 mrm mod(3));

if value("cpulevel") >= 386
opcode "MOV"
  (comment "Intel Pentium docs state: mod==3, reg=TR register, r/m=general register")
  (reads rm(dw))
  (writes tr(reg))
  (dest=tr(reg))
  (param=rm(dw))
  (code 0x0F 0x26 mrm mod(3));

if value("fpulevel") >= 387
opcode "FCOS"
  (comment "0xD9 0xFF")
  (reads st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(7) rm(7));

if value("fpulevel") >= 387
opcode "FSIN"
  (comment "0xD9 0xFE")
  (reads st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(7) rm(6));

if value("fpulevel") >= 387
opcode "FSINCOS"
  (comment "0xD9 0xFB")
  (reads st(0))
  (modifies st(0))
  (writes st(0))
  (dest=st(0))
  (param=st(0))
  (code 0xD9 mrm mod(3) reg(7) rm(3));

if value("fpulevel") >= 387
opcode "FUCOM"
  (comment "FUCOM 0xDD 0xE0+i")
  (reads st(0),st(reg))
  (param(0)=st(0))
  (param(1)=st(reg))
  (code 0xDD mrm mod(3) reg(4) fpu);

if value("fpulevel") >= 387
opcode "FUCOMP"
  (comment "FUCOMP 0xDD 0xE8+i")
  (modifies fpu(top))
  (fpu stack pop st(0))
  (reads st(0),st(reg))
  (param(0)=st(0))
  (param(1)=st(reg))
  (code 0xDD mrm mod(3) reg(4) fpu);

if value("fpulevel") >= 387
opcode "FUCOMPP"
  (comment "FUCOMPP 0xDD 0xE9")
  (modifies fpu(top))
  (fpu stack pop st(0),st(1))
  (reads st(0),st(1))
  (param(0)=st(0))
  (param(1)=st(1))
  (code 0xDA mrm mod(3) reg(5) rm(1) fpu);

if value("cpulevel") >= 486
opcode "BSWAP"
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (dest=reg(v))
  (param=reg(v))
  (code 0x0F i=0xC8-0xCF reg=(i&7));

if value("cpulevel") >= 486
opcode "INVD"
  (code 0x0F 0x08);

if value("cpulevel") >= 486
opcode "INVLPG"
  (dest=rm(v))
  (code 0x0F 0x01 mrm reg(7) mod(!3));

if value("cpulevel") >= 486
opcode "WBINVD"
  (code 0x0F 0x09);

if value("cpulevel") >= 486
opcode "XADD"
  (dest=rm(b))
  (param=reg(b))
  (code 0x0F 0xC0 mrm);

if value("cpulevel") >= 486
opcode "XADD"
  (dest=rm(v))
  (param=reg(v))
  (code 0x0F 0xC1 mrm);

if value("cpuid") > 0
opcode "CPUID"
  (reads eax)
  (modifies eax,ebx,ecx,edx)
  (writes eax,ebx,ecx,edx)
  (code 0x0F 0xA2);

if value("cpulevel") >= 386
opcode "RSM"
  (modifies all)
  (code 0x0F 0xAA);

if value("cpulevel") >= 586
opcode "RDTSC"
  (writes eax,edx)
  (code 0x0F 0x31);

if value("cpulevel") >= 586
opcode "RDMSR"
  (reads ecx)
  (writes eax,edx)
  (code 0x0F 0x32);

if value("cpulevel") >= 586
opcode "WRMSR"
  (reads ecx,eax,edx)
  (code 0x0F 0x30);

if value("cpulevel") >= 586
opcode "CMPXCHG8B"
  (dest=rm(qw))
  (reads eax,edx,ecx,ebx,rm(qw))
  (modifies flags(zf),rm(qw))
  (writes flags(zf),rm(qw),eax,edx)
  (code 0x0F 0xC7 mrm mod(!3) reg(1));

if ((value("cpulevel") >= 686) or (value("mmx") > 0))
opcode "RDPMC"
  (reads ecx)
  (modifies eax,edx)
  (writes eax,edx)
  (code 0x0F 0x33);

if value("cpulevel") > 86
opcode "UD2"
  (code 0x0F 0x0B);

if value("cpulevel") > 86
opcode "UD2"
  (code 0x0F 0xB9);

if ((value("cpulevel") >= 386) and (value("cpulevel") <= 486)) {;
  opcode "UMOV"
    (reads reg(b))
    (writes rm(b))
    (dest=rm(b))
    (param=reg(b))
    (code 0x0F 0x10 mrm);

  opcode "UMOV"
    (reads reg(v))
    (writes rm(v))
    (dest=rm(v))
    (param=reg(v))
    (code 0x0F 0x11 mrm);

  opcode "UMOV"
    (writes reg(b))
    (reads rm(b))
    (param=rm(b))
    (dest=reg(b))
    (code 0x0F 0x12 mrm);

  opcode "UMOV"
    (writes reg(v))
    (reads rm(v))
    (param=rm(v))
    (dest=reg(v))
    (code 0x0F 0x13 mrm);
} if;

if ((value("cpulevel") >= 586) and (value("syscall") > 0))
opcode "SYSCALL"
  (code 0x0F 0x05);

if ((value("cpulevel") >= 586) and (value("syscall") > 0))
opcode "SYSRET"
  (code 0x0F 0x07);

if value("cpulevel") >= 686 {;
opcode "CMOVO"
  (reads rm(v),flags(of))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x40 mrm);

opcode "CMOVNO"
  (reads rm(v), flags(of))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x41 mrm);

opcode "CMOVC"
  (reads rm(v), flags(cf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x42 mrm);

opcode "CMOVNC"
  (reads rm(v), flags(cf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x43 mrm);

opcode "CMOVZ"
  (reads rm(v), flags(zf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x44 mrm);

opcode "CMOVNZ"
  (reads rm(v), flags(zf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x45 mrm);

opcode "CMOVNA"
  (reads rm(v), flags(zf,cf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x46 mrm);

opcode "CMOVA"
  (reads rm(v), flags(zf,cf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x47 mrm);

opcode "CMOVS"
  (reads rm(v), flags(sf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x48 mrm);

opcode "CMOVNS"
  (reads rm(v), flags(sf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x49 mrm);

opcode "CMOVP"
  (reads rm(v), flags(pf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x4A mrm);

opcode "CMOVNP"
  (reads rm(v), flags(pf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x4B mrm);

opcode "CMOVL"
  (reads rm(v), flags(sf,of))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x4C mrm);

opcode "CMOVNL"
  (reads rm(v), flags(sf,of))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x4D mrm);

opcode "CMOVNG"
  (reads rm(v), flags(zf,sf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x4E mrm);

opcode "CMOVG"
  (reads rm(v), flags(zf,sf))
  (writes reg(v))
  (dest=reg(v))
  (param=rm(v))
  (code 0x0F 0x4F mrm);
} if;

if value("cpulevel") >= 686 {;
  opcode "FCMOVB"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(0) fpu);

  opcode "FCMOVE"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(1) fpu);

  opcode "FCMOVBE"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(2) fpu);

  opcode "FCMOVU"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDA mrm mod(3) reg(3) fpu);

  opcode "FCMOVNB"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDB mrm mod(3) reg(0) fpu);

  opcode "FCMOVNE"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDB mrm mod(3) reg(1) fpu);

  opcode "FCMOVNBE"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDB mrm mod(3) reg(2) fpu);

  opcode "FCMOVNU"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDB mrm mod(3) reg(3) fpu);

  opcode "FCOMI"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDB mrm mod(3) reg(6) fpu);

  opcode "FCOMIP"
    (fpu stack pop st(0))
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDF mrm mod(3) reg(6) fpu);

  opcode "FUCOMI"
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDB mrm mod(3) reg(5) fpu);

  opcode "FUCOMIP"
    (fpu stack pop st(0))
    (reads st(rm),st(0))
    (writes st(0))
    (dest=st(0))
    (param=st(rm))
    (code 0xDF mrm mod(3) reg(5) fpu);
} if;

if value("mmx") > 0 {;
  opcode "EMMS"
    (code 0x0F 0x77 fpu);

  opcode "MOVD"
    (reads rm(dw))
    (writes mm(reg))
    (dest=mm(reg))
    (param=rm(dw))
    (code 0x0F 0x6E mrm fpu);

  opcode "MOVD"
    (writes rm(dw))
    (reads mm(reg))
    (param=mm(reg))
    (dest=rm(dw))
    (code 0x0F 0x7E mrm fpu);

  opcode "MOVQ"
    (reads rm(qw))
    (writes mm(reg))
    (dest=mm(reg))
    (param=rm(qw))
    (code 0x0F 0x6F mrm fpu);

  opcode "MOVQ"
    (writes rm(qw))
    (reads mm(reg))
    (param=mm(reg))
    (dest=rm(qw))
    (code 0x0F 0x7F mrm fpu);

  opcode "PACKSSDW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x6B mrm fpu);

  opcode "PACKSSWB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x63 mrm fpu);

  opcode "PACKUSWB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x67 mrm fpu);

  opcode "PADDB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xFC mrm fpu);

  opcode "PADDW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xFD mrm fpu);

  opcode "PADDD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xFE mrm fpu);

  opcode "PADDQ"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xD4 mrm fpu);

  opcode "PADDSB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xEC mrm fpu);

  opcode "PADDSW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xED mrm fpu);

  opcode "PADDUSB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xDC mrm fpu);

  opcode "PADDUSW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xDD mrm fpu);

  opcode "PAND"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xDB mrm fpu);

  opcode "PANDN"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xDF mrm fpu);

  opcode "POR"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xEB mrm fpu);

  opcode "PXOR"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xEF mrm fpu);

  opcode "PCMPEQB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x74 mrm fpu);

  opcode "PCMPEQW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x75 mrm fpu);

  opcode "PCMPEQD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x76 mrm fpu);

  opcode "PCMPGTB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x64 mrm fpu);

  opcode "PCMPGTW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x65 mrm fpu);

  opcode "PCMPGTD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x66 mrm fpu);

  opcode "PMADDWD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xF5 mrm fpu);

  opcode "PMULHW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xE5 mrm fpu);

  opcode "PMULLW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xD5 mrm fpu);

  opcode "PSLLW"
    (writes mm(reg))
    (dest=mm(reg))
    (param=i)
    (code 0x0F 0x71 mrm i=immediate(b) reg(6) fpu);

  opcode "PSLLW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xF1 mrm fpu);

  opcode "PSLLD"
    (writes mm(reg))
    (dest=mm(reg))
    (param=i)
    (code 0x0F 0x72 mrm i=immediate(b) reg(6) fpu);

  opcode "PSLLD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xF2 mrm fpu);

  opcode "PSLLQ"
    (writes mm(reg))
    (dest=mm(reg))
    (param=i)
    (code 0x0F 0x73 mrm i=immediate(b) reg(6) fpu);

  opcode "PSLLQ"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xF3 mrm fpu);

  opcode "PSRAD"
    (writes mm(reg))
    (dest=mm(reg))
    (param=i)
    (code 0x0F 0x72 mrm i=immediate(b) reg(4) fpu);

  opcode "PSRAD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xE2 mrm fpu);

  opcode "PSRAW"
    (writes mm(reg))
    (dest=mm(reg))
    (param=i)
    (code 0x0F 0x71 mrm i=immediate(b) reg(4) fpu);

  opcode "PSRAW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xE1 mrm fpu);

  opcode "PSRLW"
    (writes mm(reg))
    (dest=mm(reg))
    (param=i)
    (code 0x0F 0x71 mrm i=immediate(b) reg(2) fpu);

  opcode "PSRLW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xD1 mrm fpu);

  opcode "PSRLD"
    (writes mm(reg))
    (dest=mm(reg))
    (param=i)
    (code 0x0F 0x72 mrm i=immediate(b) reg(2) fpu);

  opcode "PSRLD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xD2 mrm fpu);

  opcode "PSRLQ"
    (writes mm(reg))
    (dest=mm(reg))
    (param=i)
    (code 0x0F 0x73 mrm i=immediate(b) reg(2) fpu);

  opcode "PSRLQ"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xD3 mrm fpu);

  opcode "PSUBB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xF8 mrm fpu);

  opcode "PSUBW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xF9 mrm fpu);

  opcode "PSUBD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xFA mrm fpu);

  opcode "PSUBSB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xE8 mrm fpu);

  opcode "PSUBSW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xE9 mrm fpu);

  opcode "PSUBUSB"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xD8 mrm fpu);

  opcode "PSUBUSW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0xD9 mrm fpu);

  opcode "PUNPCKHBW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x68 mrm fpu);

  opcode "PUNPCKHWD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x69 mrm fpu);

  opcode "PUNPCKHDQ"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x6A mrm fpu);

  opcode "PUNPCKLBW"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x60 mrm fpu);

  opcode "PUNPCKLWD"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x61 mrm fpu);

  opcode "PUNPCKLDQ"
    (reads mm(rm))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x62 mrm fpu);
} if;

if ((value("cpulevel") >= 586) and (value("sysenter") > 0)) {;
  opcode "SYSENTER"
    (modifies all)
    (code 0x0F 0x34);

  opcode "SYSEXIT"
    (modifies all)
    (code 0x0F 0x35);
} if;

if value("3dnow") > 0
opcode "FEMMS"
  (code 0x0F 0x0E);

if ((value("3dnow") > 0) or ((value("vendor") == "amd") and (value("cpulevel") >= 686))) {;
  opcode "PREFETCH"
    (code 0x0F 0x0D mrm reg(0));

  opcode "PREFETCHW"
    (code 0x0F 0x0D mrm reg(1));

  opcode "PREFETCHWT1"
    (code 0x0F 0x0D mrm reg(2));
} if;

if value("3dnow") > 0 {;
  opcode "PAVGUSB"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xBF);

  opcode "PF2ID"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x1D);

  opcode "PFACC"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xAE);

  opcode "PFADD"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x9E);

  opcode "PFCMPEQ"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xB0);

  opcode "PFCMPGE"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x90);

  opcode "PFCMPGT"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xA0);

  opcode "PFMAX"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xA4);

  opcode "PFMIN"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x94);

  opcode "PFMUL"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xB4);

  opcode "PFRCP"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x96);

  opcode "PFRCPIT1"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xA6);

  opcode "PFRCPIT2"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xB6);

  opcode "PFRSQIT1"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xA7);

  opcode "PFRSQRT"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x97);

  opcode "PFSUB"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x9A);

  opcode "PFSUBR"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xAA);

  opcode "PI2FD"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x0D);

  opcode "PMULHRW"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xB7);
} if;

if value("3dnow+") > 0 {;
  opcode "PF2IW"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x1C);

  opcode "PFNACC"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x8A);

  opcode "PFPNACC"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x8E);

  opcode "PI2FW"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0x0C);

  opcode "PSWAPD"
    (reads mm(reg),mm(rm))
    (modifies mm(reg))
    (writes mm(reg))
    (dest=mm(reg))
    (param=mm(rm))
    (code 0x0F 0x0F mrm 0xBB);
} if;

