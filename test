dialect "intel-x86";

log ("cpulevel: " + value("cpulevel"));
log ("fpulevel: " + value("fpulevel"));

comment "---------------begin prefixes----------------";

prefix "CS:"
  (comment "Segment override prefix")
  (desc "CS segment override")
  (code 0x2E)
  (seg=cs);

prefix "DS:"
  (comment "Segment override prefix")
  (desc "DS segment override")
  (code 0x3E)
  (seg=ds);

prefix "ES:"
  (comment "Segment override prefix")
  (desc "ES segment override")
  (code 0x26)
  (seg=es);

if value("cpulevel") >= 386
prefix "FS:"
  (comment "386 Segment override prefix")
  (desc "FS segment override")
  (code 0x64)
  (seg=fs);
else
  log "No FS override";

if value("cpulevel") >= 386
prefix "GS:"
  (comment "386 Segment override prefix")
  (desc "GS segment override")
  (code 0x65)
  (seg=gs);
else
  log "No GS override";

prefix "SS:"
  (comment "Segment override prefix")
  (desc "SS segment override")
  (code 0x36)
  (seg=ss);

if value("cpulevel") >= 186 {;
  log "186 #UD and limit";
  unknown opcode ud;
  opcode limit 15;
} if;
else {;
  log "8086 no-#UD and no-limit";
  unknown opcode silent;
  opcode limit none;
} if;

comment "-----------------begin opcodes----------------";

opcode "PUSH"
  (comment "PUSH ES")
  (modifies spv)
  (stack push es)
  (reads es)
  (param=es)
  (code 0x06);

opcode "POP"
  (comment "POP ES")
  (modifies spv)
  (stack pop es)
  (writes es)
  (dest=es)
  (code 0x07);

opcode "PUSH"
  (comment "PUSH CS")
  (modifies spv)
  (stack push cs)
  (reads cs)
  (param=cs)
  (code 0x0E);

if value("cpulevel") <= 86
opcode "POP"
  (comment "POP CS")
  (modifies spv)
  (stack pop cs)
  (writes cs)
  (dest=cs)
  (code 0x0F);

opcode "PUSH"
  (comment "PUSH SS")
  (modifies spv)
  (stack push ss)
  (reads ss)
  (param=ss)
  (code 0x16);

opcode "POP"
  (comment "POP SS")
  (modifies spv)
  (stack pop ss)
  (writes ss)
  (dest=ss)
  (code 0x17);

opcode "PUSH"
  (comment "PUSH DS")
  (modifies spv)
  (stack push ds)
  (reads ds)
  (param=ds)
  (code 0x1E);

opcode "POP"
  (comment "POP DS")
  (modifies spv)
  (stack pop ds)
  (writes ds)
  (dest=ds)
  (code 0x1F);

opcode "DAA"
  (comment "DAA adjust AL after addition")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(cf))
  (modifies al, flags(cf,af,sf,zf,pf))
  (writes al, flags(cf,af,sf,zf,pf,of))
  (code 0x27);

opcode "DAS"
  (comment "DAS adjust AL after subtraction")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(cf))
  (modifies al, flags(cf,af,sf,zf,pf))
  (writes al, flags(cf,af,sf,zf,pf,of))
  (code 0x2F);

opcode "AAA"
  (comment "AAA ascii adjust AL after addition")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(af))
  (modifies ax, flags(cf,af))
  (writes ax, flags(cf,af,of,sf,zf,pf))
  (code 0x37);

opcode "AAS"
  (comment "AAS ascii adjust AL after subtraction")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(af))
  (modifies ax, flags(cf,af))
  (writes ax, flags(cf,af,of,sf,zf,pf))
  (code 0x3F);

opcode "INC"
  (comment "INC register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (comment "TODO: Not valid in x64 long mode")
  (code a=0x40-0x47 reg=(a&7))
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (param=reg(v));

opcode "DEC"
  (comment "DEC register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (comment "TODO: Not valid in x64 long mode")
  (code a=0x48-0x4F reg=(a&7))
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (param=reg(v));

opcode "AAM"
  (comment "AAD ascii adjust AX before multiply")
  (comment "TODO: Not valid in x64 long mode")
  (reads ax, d)
  (modifies ax, flags(sf,zf,pf))
  (writes ax, flags(sf,zf,pf,of,af,cf))
  (param=d)
  (code 0xD4 d=immediate(b));

opcode "AAD"
  (comment "AAD ascii adjust AX before division")
  (comment "TODO: Not valid in x64 long mode")
  (reads ax, d)
  (modifies ax, flags(sf,zf,pf))
  (writes ax, flags(sf,zf,pf,of,af,cf))
  (param=d)
  (code 0xD5 d=immediate(b));

