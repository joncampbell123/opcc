dialect "intel-x86";

log ("cpulevel: " + value("cpulevel"));
log ("fpulevel: " + value("fpulevel"));

comment "---------------begin prefixes----------------";

if value("cpulevel") >= 186 {;
  log "186 #UD and limit";
  unknown opcode ud;
  opcode limit 15;
} if;
else {;
  log "8086 no-#UD and no-limit";
  unknown opcode silent;
  opcode limit none;
} if;

comment "-----------------begin opcodes----------------";

opcode "PUSH"
  (comment "PUSH ES")
  (modifies spv)
  (stack push es)
  (reads es)
  (param=es)
  (code 0x06);

opcode "POP"
  (comment "POP ES")
  (modifies spv)
  (stack pop es)
  (writes es)
  (dest=es)
  (code 0x07);

opcode "PUSH"
  (comment "PUSH CS")
  (modifies spv)
  (stack push cs)
  (reads cs)
  (param=cs)
  (code 0x0E);

if value("cpulevel") <= 86
opcode "POP"
  (comment "POP CS")
  (modifies spv)
  (stack pop cs)
  (writes cs)
  (dest=cs)
  (code 0x0F);

opcode "PUSH"
  (comment "PUSH SS")
  (modifies spv)
  (stack push ss)
  (reads ss)
  (param=ss)
  (code 0x16);

opcode "POP"
  (comment "POP SS")
  (modifies spv)
  (stack pop ss)
  (writes ss)
  (dest=ss)
  (code 0x17);

opcode "PUSH"
  (comment "PUSH DS")
  (modifies spv)
  (stack push ds)
  (reads ds)
  (param=ds)
  (code 0x1E);

opcode "POP"
  (comment "POP DS")
  (modifies spv)
  (stack pop ds)
  (writes ds)
  (dest=ds)
  (code 0x1F);

prefix "ES:"
  (comment "Segment override prefix")
  (desc "ES segment override")
  (code 0x26)
  (seg=es);

opcode "DAA"
  (comment "DAA adjust AL after addition")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(cf))
  (modifies al)
  (writes al, flags(cf,af,sf,zf,pf,of))
  (code 0x27);

prefix "CS:"
  (comment "Segment override prefix")
  (desc "CS segment override")
  (code 0x2E)
  (seg=cs);

opcode "DAS"
  (comment "DAS adjust AL after subtraction")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(cf))
  (modifies al)
  (writes al, flags(cf,af,sf,zf,pf,of))
  (code 0x2F);

prefix "SS:"
  (comment "Segment override prefix")
  (desc "SS segment override")
  (code 0x36)
  (seg=ss);

opcode "AAA"
  (comment "AAA ascii adjust AL after addition")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(af))
  (modifies ax)
  (writes ax, flags(cf,af,of,sf,zf,pf))
  (code 0x37);

prefix "DS:"
  (comment "Segment override prefix")
  (desc "DS segment override")
  (code 0x3E)
  (seg=ds);

opcode "AAS"
  (comment "AAS ascii adjust AL after subtraction")
  (comment "TODO: Not valid in x64 long mode")
  (reads al, flags(af))
  (modifies ax)
  (writes ax, flags(cf,af,of,sf,zf,pf))
  (code 0x3F);

opcode "INC"
  (comment "INC register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (comment "TODO: Not valid in x64 long mode")
  (code a=0x40-0x47 reg=(a&7))
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (param=reg(v));

opcode "DEC"
  (comment "DEC register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (comment "TODO: Not valid in x64 long mode")
  (code a=0x48-0x4F reg=(a&7))
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (param=reg(v));

opcode "PUSH"
  (comment "PUSH register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (code a=0x50-0x57 reg=(a&7))
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (param=reg(v));

opcode "POP"
  (comment "POP register, word size(v). reg16 if 16-bit, reg32 if 32-bit")
  (code a=0x58-0x5F reg=(a&7))
  (reads reg(v))
  (modifies reg(v))
  (writes reg(v))
  (param=reg(v));

if value("cpulevel") >= 386
prefix "FS:"
  (comment "386 Segment override prefix")
  (desc "FS segment override")
  (code 0x64)
  (seg=fs);
else
  log "No FS override";

if value("cpulevel") >= 386
prefix "GS:"
  (comment "386 Segment override prefix")
  (desc "GS segment override")
  (code 0x65)
  (seg=gs);
else
  log "No GS override";

opcode "NOP"
  (comment "Technically, XCHG AX,AX, but that does nothing and nothing else is modified")
  (code 0x90);

opcode "XCHG"
  (code a=0x91-0x97 reg=(a&7))
  (reads av, reg(v))
  (modifies av, reg(v))
  (writes av, reg(v))
  (dest=reg(v))
  (param=av);

opcode "CBW"
  (code 0x98)
  (reads al)
  (modifies av)
  (writes av);

opcode "CWD"
  (code 0x99)
  (reads av)
  (writes dv)
  (modifies dv);

opcode "PUSHF"
  (code 0x9C)
  (reads flags(all))
  (modifies spv)
  (stack push flags(all));

opcode "POPF"
  (code 0x9D)
  (writes flags(all))
  (modifies spv)
  (stack pop flags(all));

opcode "SAHF"
  (code 0x9E)
  (reads ah)
  (writes flags(sf,zf,af,pf,cf));

opcode "LAHF"
  (code 0x9F)
  (reads flags(sf,zf,af,pf,cf))
  (writes ah);

opcode "MOV"
  (writes al)
  (reads memory(b,(a)))
  (dest=al)
  (param=a)
  (code 0xA0 a=immediate(v));

opcode "MOV"
  (writes av)
  (reads memory(v,a))
  (dest=av)
  (param=a)
  (code 0xA1 a=immediate(v));

opcode "MOV"
  (writes memory(b,a))
  (reads al)
  (dest=a)
  (param=al)
  (code 0xA2 a=immediate(v));

opcode "MOV"
  (writes memory(v,a))
  (reads av)
  (dest=a)
  (param=av)
  (code 0xA3 a=immediate(v));

opcode "MOV"
  (writes reg(b))
  (dest=reg(b))
  (param=i)
  (code a=0xB0-0xB7 i=immediate(b) reg=(a&7));

opcode "MOV"
  (writes reg(v))
  (dest=reg(v))
  (param=i)
  (code a=0xB8-0xBF i=immediate(v) reg=(a&7));

opcode "RET"
  (modifies spv)
  (stack pop ipv)
  (writes ipv)
  (param=c)
  (code 0xC2 c=immediate(w));

opcode "RET"
  (modifies spv)
  (stack pop ipv)
  (writes ipv)
  (code 0xC3);

opcode "RETF"
  (modifies spv)
  (stack pop ipv,cs)
  (writes ipv,cs)
  (param=c)
  (code 0xCA c=immediate(w));

opcode "RETF"
  (modifies spv)
  (stack pop ipv,cs)
  (writes ipv,cs)
  (code 0xCB);

opcode "INT"
  (modifies all)
  (param=3)
  (code 0xCC);

opcode "INT"
  (modifies all)
  (param=i)
  (code 0xCD i=immediate(b));

opcode "INTO"
  (modifies all)
  (reads flags(of))
  (code 0xCE);

opcode "IRET"
  (modifies spv)
  (stack pop ipv,cs,flags(all))
  (writes ipv,cs,flags(all))
  (code 0xCF);

opcode "AAM"
  (comment "AAD ascii adjust AX before multiply")
  (comment "TODO: Not valid in x64 long mode")
  (reads ax, d)
  (modifies ax)
  (writes ax, flags(sf,zf,pf,of,af,cf))
  (param=d)
  (code 0xD4 d=immediate(b));

opcode "AAD"
  (comment "AAD ascii adjust AX before division")
  (comment "TODO: Not valid in x64 long mode")
  (reads ax, d)
  (modifies ax)
  (writes ax, flags(sf,zf,pf,of,af,cf))
  (param=d)
  (code 0xD5 d=immediate(b));

opcode "XLAT"
  (reads al, bv)
  (modifies al)
  (writes al)
  (code 0xD7);

opcode "LOOPNZ"
  (comment "ipv is evaluated after decoding instruction")
  (comment "--(E)CX, if (E)CX != 0 and !ZF, jump")
  (reads ipv, cv, flags(zf))
  (modifies ipv, cv)
  (writes ipv, cv)
  (param=n)
  (code 0xE0 p=immediate(sb) n=(ipv+p));

opcode "LOOPZ"
  (comment "ipv is evaluated after decoding instruction")
  (comment "--(E)CX, if (E)CX != 0 and ZF, jump")
  (reads ipv, cv, flags(zf))
  (modifies ipv, cv)
  (writes ipv, cv)
  (param=n)
  (code 0xE1 p=immediate(sb) n=(ipv+p));

opcode "LOOP"
  (comment "ipv is evaluated after decoding instruction")
  (comment "if --(E)CX != 0, jump")
  (reads ipv, cv)
  (modifies ipv, cv)
  (writes ipv, cv)
  (param=n)
  (code 0xE2 p=immediate(sb) n=(ipv+p));

opcode "JCXZ"
  (comment "ipv is evaluated after decoding instruction")
  (comment "Jump if (E)CX == 0")
  (reads ipv, cv)
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0xE3 p=immediate(sb) n=(ipv+p));

opcode "IN"
  (writes al)
  (dest=al)
  (param=p)
  (code 0xE4 p=immediate(b));

opcode "IN"
  (writes av)
  (dest=av)
  (param=p)
  (code 0xE5 p=immediate(b));

opcode "OUT"
  (reads al)
  (param(0)=p)
  (param(1)=al)
  (code 0xE6 p=immediate(b));

opcode "OUT"
  (reads av)
  (param(0)=p)
  (param(1)=av)
  (code 0xE7 p=immediate(b));

opcode "CALL"
  (comment "ipv is evaluated after decoding CALL instruction")
  (comment "relative address is 16-bit signed or 32-bit signed")
  (reads ipv)
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0xE8 p=immediate(sv) n=(ipv+p));

opcode "JMP"
  (comment "ipv is evaluated after decoding JMP instruction")
  (comment "relative address is 16-bit signed or 32-bit signed")
  (reads ipv)
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0xE9 p=immediate(sv) n=(ipv+p));

opcode "JMP"
  (comment "jmp far address, 16:16 or 16:32")
  (writes ipv,cs)
  (param=p)
  (code 0xEA p=immediate(fpv));

opcode "JMP"
  (comment "ipv is evaluated after decoding JMP instruction")
  (reads ipv)
  (modifies ipv)
  (writes ipv)
  (param=n)
  (code 0xEB p=immediate(sb) n=(ipv+p));

opcode "IN"
  (writes al)
  (dest=al)
  (param=dx)
  (code 0xEC);

opcode "IN"
  (writes av)
  (dest=av)
  (param=dx)
  (code 0xED);

opcode "OUT"
  (reads al)
  (param(0)=dx)
  (param(1)=al)
  (code 0xEE);

opcode "OUT"
  (reads av)
  (param(0)=dx)
  (param(1)=av)
  (code 0xEF);

prefix "LOCK"
  (comment "lock prefix")
  (comment "TODO: syntax to specify lock")
  (desc "lock prefix")
  (code 0xF0);

opcode "INT"
  (comment "INT 1h or ICEBP")
  (desc "INT 1h, or if conditions are right, ICEBP")
  (modifies all)
  (param=1)
  (code 0xF1);

prefix "REPNZ"
  (comment "TODO: rep=!z syntax")
  (comment "repeat while not z")
  (desc "rep while not z")
  (code 0xF2);

prefix "REPZ"
  (comment "TODO: rep=z syntax")
  (comment "repeat while z")
  (desc "rep while z")
  (code 0xF3);

opcode "HLT"
  (code 0xF4);

opcode "CMC"
  (reads flags(cf))
  (writes flags(cf))
  (code 0xF5);

opcode "CLC"
  (writes flags(cf))
  (code 0xF8);

opcode "STC"
  (writes flags(cf))
  (code 0xF9);

opcode "CLI"
  (writes flags(if))
  (code 0xFA);

opcode "STI"
  (writes flags(if))
  (code 0xFB);

opcode "CLD"
  (writes flags(df))
  (code 0xFC);

opcode "STD"
  (writes flags(df))
  (code 0xFD);

