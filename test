
prefix "CS:"
  (comment "Segment override prefix")
  (desc "CS segment override")
  (code 0x2E)
  (seg=cs);

prefix "DS:"
  (comment "Segment override prefix")
  (desc "DS segment override")
  (code 0x3E)
  (seg=ds);

prefix "ES:"
  (comment "Segment override prefix")
  (desc "ES segment override")
  (code 0x26)
  (seg=es);

prefix "FS:"
  (comment "386 Segment override prefix")
  (desc "FS segment override")
  (code 0x64)
  (seg=fs);

prefix "GS:"
  (comment "386 Segment override prefix")
  (desc "GS segment override")
  (code 0x65)
  (seg=gs);

prefix "SS:"
  (comment "Segment override prefix")
  (desc "SS segment override")
  (code 0x36)
  (seg=ss);

comment "log allows human readable commentary inline to this spec";
log "testing 1 2 3";
log format("hello");
log format("hello " 123456 " world");
log format("hello " 1.234 " world");
log format("hello " -123456 " world");
log format("hello " -123456 " " -1.234 " world");
log format("hello" " " "world");
log format("hello " format(123456 " world"));
log format("hello " format(123 " " format(456 " ") "world"));

set "hello" 3;
log value("hello");

set "hello" -3;
log value("hello");

set "hello" 3.14;
log value("hello");

set "hello" -3.14;
log value("hello");

set "hello" format("hello " 123 " world");
log value("hello");

log "The following is a value() expression";
log value("hello");
log isset("hello");
log format("is set: " isset("hello"));

log "and with format()";
log format("hello world value() expression = \"" value("hello") "\"");

log "The following is a value() expression that does not exist";
log value("hello world");

unset "hello";
log isset("hello");
log format("is set: " isset("hello"));

log "The following is a value() expression after unset";
log value("hello");

set "hello" "123";
set "hello" format(value("hello") " 456");
log value("hello");

if  1           log     "log if  1, true";
if  0           error   "log if  0, should not happen";
if -1           error   "log if -1, should not happen";
if  "string"    log     "log if  string, true";
if  ""          error   "log if  empty string, should not happen";
if  1.0         log     "log if  1.0, true";
if  1.1         log     "log if  1.1, true";
if -1.0         error   "log if -1.0, should not happen";
if -1.1         error   "log if -1.1, should not happen";
if  0.0         error   "log if  0.0, should not happen";
if -0.0         error   "log if -0.0, should not happen";
if  0.5         log     "log if  0.5, true";
if -0.5         error   "log if -0.5, should not happen";
if true         log     "log if true, true";
if false        error   "log if false, should not happen";

if isset("hello") log   "log if isset hello, true";
if isset("bye") error   "log if isset bye, should not happen";
if value("hello") log   "log if value hello, true";
if value("bye") error   "log if value bye, should not happen";

if not 1        error   "log if not 1, should not happen";
if not 0        log     "log if not 0, true";

log format();
if format()     error   "log if format(), should not happen";
if format("hello") log  "log if format hello, true";
if format(value("hello")) log "log if format value hello, true";
if format(value("bye")) error "log if format value bye, should not happen";
if format("bye") log    "log if format bye, true";

log 1;
log -1;
log 2;
log -2;
log 0.0;
log 0.5;
log 1.0;
log -0.5;
log -1.0;
log true;
log false;

warning "hello";
warning 5;
warning 1.234;
warning isset("hello");
warning format("hello " value("hello"));

unknown opcode silent;
unknown opcode ud;
opcode limit none;
opcode limit 15;

